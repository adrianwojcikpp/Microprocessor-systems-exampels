
Serial_Port_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044f0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  080046c0  080046c0  000146c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004800  08004800  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004800  08004800  00014800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004808  08004808  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004808  08004808  00014808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800480c  0800480c  0001480c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000070  08004880  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08004880  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ceea  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c0  00000000  00000000  0002cf8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000910  00000000  00000000  0002f150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000828  00000000  00000000  0002fa60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026867  00000000  00000000  00030288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b716  00000000  00000000  00056aef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e773b  00000000  00000000  00062205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00149940  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a3c  00000000  00000000  00149994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080046a8 	.word	0x080046a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080046a8 	.word	0x080046a8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08c      	sub	sp, #48	; 0x30
 80005bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005be:	f107 031c 	add.w	r3, r7, #28
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]
 80005cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ce:	4b7a      	ldr	r3, [pc, #488]	; (80007b8 <MX_GPIO_Init+0x200>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a79      	ldr	r2, [pc, #484]	; (80007b8 <MX_GPIO_Init+0x200>)
 80005d4:	f043 0304 	orr.w	r3, r3, #4
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b77      	ldr	r3, [pc, #476]	; (80007b8 <MX_GPIO_Init+0x200>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0304 	and.w	r3, r3, #4
 80005e2:	61bb      	str	r3, [r7, #24]
 80005e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e6:	4b74      	ldr	r3, [pc, #464]	; (80007b8 <MX_GPIO_Init+0x200>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a73      	ldr	r2, [pc, #460]	; (80007b8 <MX_GPIO_Init+0x200>)
 80005ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b71      	ldr	r3, [pc, #452]	; (80007b8 <MX_GPIO_Init+0x200>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fa:	617b      	str	r3, [r7, #20]
 80005fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	4b6e      	ldr	r3, [pc, #440]	; (80007b8 <MX_GPIO_Init+0x200>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a6d      	ldr	r2, [pc, #436]	; (80007b8 <MX_GPIO_Init+0x200>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b6b      	ldr	r3, [pc, #428]	; (80007b8 <MX_GPIO_Init+0x200>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	613b      	str	r3, [r7, #16]
 8000614:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	4b68      	ldr	r3, [pc, #416]	; (80007b8 <MX_GPIO_Init+0x200>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a67      	ldr	r2, [pc, #412]	; (80007b8 <MX_GPIO_Init+0x200>)
 800061c:	f043 0302 	orr.w	r3, r3, #2
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b65      	ldr	r3, [pc, #404]	; (80007b8 <MX_GPIO_Init+0x200>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0302 	and.w	r3, r3, #2
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800062e:	4b62      	ldr	r3, [pc, #392]	; (80007b8 <MX_GPIO_Init+0x200>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a61      	ldr	r2, [pc, #388]	; (80007b8 <MX_GPIO_Init+0x200>)
 8000634:	f043 0308 	orr.w	r3, r3, #8
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b5f      	ldr	r3, [pc, #380]	; (80007b8 <MX_GPIO_Init+0x200>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0308 	and.w	r3, r3, #8
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000646:	4b5c      	ldr	r3, [pc, #368]	; (80007b8 <MX_GPIO_Init+0x200>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a5b      	ldr	r2, [pc, #364]	; (80007b8 <MX_GPIO_Init+0x200>)
 800064c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b59      	ldr	r3, [pc, #356]	; (80007b8 <MX_GPIO_Init+0x200>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	f244 0181 	movw	r1, #16513	; 0x4081
 8000664:	4855      	ldr	r0, [pc, #340]	; (80007bc <MX_GPIO_Init+0x204>)
 8000666:	f000 ffe3 	bl	8001630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	2140      	movs	r1, #64	; 0x40
 800066e:	4854      	ldr	r0, [pc, #336]	; (80007c0 <MX_GPIO_Init+0x208>)
 8000670:	f000 ffde 	bl	8001630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000674:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800067a:	4b52      	ldr	r3, [pc, #328]	; (80007c4 <MX_GPIO_Init+0x20c>)
 800067c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000682:	f107 031c 	add.w	r3, r7, #28
 8000686:	4619      	mov	r1, r3
 8000688:	484f      	ldr	r0, [pc, #316]	; (80007c8 <MX_GPIO_Init+0x210>)
 800068a:	f000 fe25 	bl	80012d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800068e:	2332      	movs	r3, #50	; 0x32
 8000690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000692:	2302      	movs	r3, #2
 8000694:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800069a:	2303      	movs	r3, #3
 800069c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800069e:	230b      	movs	r3, #11
 80006a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	4619      	mov	r1, r3
 80006a8:	4847      	ldr	r0, [pc, #284]	; (80007c8 <MX_GPIO_Init+0x210>)
 80006aa:	f000 fe15 	bl	80012d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006ae:	2386      	movs	r3, #134	; 0x86
 80006b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b2:	2302      	movs	r3, #2
 80006b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ba:	2303      	movs	r3, #3
 80006bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006be:	230b      	movs	r3, #11
 80006c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	4619      	mov	r1, r3
 80006c8:	4840      	ldr	r0, [pc, #256]	; (80007cc <MX_GPIO_Init+0x214>)
 80006ca:	f000 fe05 	bl	80012d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006ce:	f244 0381 	movw	r3, #16513	; 0x4081
 80006d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	2301      	movs	r3, #1
 80006d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2300      	movs	r3, #0
 80006de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	4619      	mov	r1, r3
 80006e6:	4835      	ldr	r0, [pc, #212]	; (80007bc <MX_GPIO_Init+0x204>)
 80006e8:	f000 fdf6 	bl	80012d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80006ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f2:	2302      	movs	r3, #2
 80006f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006fa:	2303      	movs	r3, #3
 80006fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006fe:	230b      	movs	r3, #11
 8000700:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	4619      	mov	r1, r3
 8000708:	482c      	ldr	r0, [pc, #176]	; (80007bc <MX_GPIO_Init+0x204>)
 800070a:	f000 fde5 	bl	80012d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800070e:	2340      	movs	r3, #64	; 0x40
 8000710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000712:	2301      	movs	r3, #1
 8000714:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071a:	2300      	movs	r3, #0
 800071c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	4619      	mov	r1, r3
 8000724:	4826      	ldr	r0, [pc, #152]	; (80007c0 <MX_GPIO_Init+0x208>)
 8000726:	f000 fdd7 	bl	80012d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800072a:	2380      	movs	r3, #128	; 0x80
 800072c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800072e:	2300      	movs	r3, #0
 8000730:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	4619      	mov	r1, r3
 800073c:	4820      	ldr	r0, [pc, #128]	; (80007c0 <MX_GPIO_Init+0x208>)
 800073e:	f000 fdcb 	bl	80012d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000742:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000748:	2302      	movs	r3, #2
 800074a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000750:	2303      	movs	r3, #3
 8000752:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000754:	230a      	movs	r3, #10
 8000756:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000758:	f107 031c 	add.w	r3, r7, #28
 800075c:	4619      	mov	r1, r3
 800075e:	481b      	ldr	r0, [pc, #108]	; (80007cc <MX_GPIO_Init+0x214>)
 8000760:	f000 fdba 	bl	80012d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000764:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000768:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800076a:	2300      	movs	r3, #0
 800076c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	4619      	mov	r1, r3
 8000778:	4814      	ldr	r0, [pc, #80]	; (80007cc <MX_GPIO_Init+0x214>)
 800077a:	f000 fdad 	bl	80012d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800077e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000784:	2302      	movs	r3, #2
 8000786:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078c:	2303      	movs	r3, #3
 800078e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000790:	230b      	movs	r3, #11
 8000792:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000794:	f107 031c 	add.w	r3, r7, #28
 8000798:	4619      	mov	r1, r3
 800079a:	4809      	ldr	r0, [pc, #36]	; (80007c0 <MX_GPIO_Init+0x208>)
 800079c:	f000 fd9c 	bl	80012d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2100      	movs	r1, #0
 80007a4:	2028      	movs	r0, #40	; 0x28
 80007a6:	f000 fcce 	bl	8001146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007aa:	2028      	movs	r0, #40	; 0x28
 80007ac:	f000 fce7 	bl	800117e <HAL_NVIC_EnableIRQ>

}
 80007b0:	bf00      	nop
 80007b2:	3730      	adds	r7, #48	; 0x30
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40020400 	.word	0x40020400
 80007c0:	40021800 	.word	0x40021800
 80007c4:	10110000 	.word	0x10110000
 80007c8:	40020800 	.word	0x40020800
 80007cc:	40020000 	.word	0x40020000

080007d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b088      	sub	sp, #32
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d6:	f000 fb7e 	bl	8000ed6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007da:	f000 f877 	bl	80008cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007de:	f7ff feeb 	bl	80005b8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007e2:	f000 faa3 	bl	8000d2c <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 80007e6:	f000 fa71 	bl	8000ccc <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SERIAL_PORT_Handle handle;
  int status;

  status = SERIAL_PORT_Init(&handle);
 80007ea:	f107 0318 	add.w	r3, r7, #24
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 f916 	bl	8000a20 <SERIAL_PORT_Init>
 80007f4:	61f8      	str	r0, [r7, #28]

  printf("Initialization status: %s \r\n", (status == 0) ? "OK" : "ERROR");
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d101      	bne.n	8000800 <main+0x30>
 80007fc:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <main+0xdc>)
 80007fe:	e000      	b.n	8000802 <main+0x32>
 8000800:	4b2b      	ldr	r3, [pc, #172]	; (80008b0 <main+0xe0>)
 8000802:	4619      	mov	r1, r3
 8000804:	482b      	ldr	r0, [pc, #172]	; (80008b4 <main+0xe4>)
 8000806:	f002 fff9 	bl	80037fc <iprintf>

  status = SERIAL_PORT_WriteString(handle, "Hello, World!\r\n");
 800080a:	69bb      	ldr	r3, [r7, #24]
 800080c:	492a      	ldr	r1, [pc, #168]	; (80008b8 <main+0xe8>)
 800080e:	4618      	mov	r0, r3
 8000810:	f000 f916 	bl	8000a40 <SERIAL_PORT_WriteString>
 8000814:	61f8      	str	r0, [r7, #28]

  printf("Writing status: %s \r\n", (status == 0) ? "OK" : "ERROR");
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d101      	bne.n	8000820 <main+0x50>
 800081c:	4b23      	ldr	r3, [pc, #140]	; (80008ac <main+0xdc>)
 800081e:	e000      	b.n	8000822 <main+0x52>
 8000820:	4b23      	ldr	r3, [pc, #140]	; (80008b0 <main+0xe0>)
 8000822:	4619      	mov	r1, r3
 8000824:	4825      	ldr	r0, [pc, #148]	; (80008bc <main+0xec>)
 8000826:	f002 ffe9 	bl	80037fc <iprintf>

  char msg[20] = { 0 }; // MAX MESSAGE SIZE: 17 CHARACTERS!
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	f107 0308 	add.w	r3, r7, #8
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]

  while (1)
  {
    status = SERIAL_PORT_ReadLine(handle, msg);
 800083c:	69bb      	ldr	r3, [r7, #24]
 800083e:	1d3a      	adds	r2, r7, #4
 8000840:	4611      	mov	r1, r2
 8000842:	4618      	mov	r0, r3
 8000844:	f000 f919 	bl	8000a7a <SERIAL_PORT_ReadLine>
 8000848:	61f8      	str	r0, [r7, #28]

    printf("Reading status: %s \r\n", (status == 0) ? "OK" : "ERROR");
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d101      	bne.n	8000854 <main+0x84>
 8000850:	4b16      	ldr	r3, [pc, #88]	; (80008ac <main+0xdc>)
 8000852:	e000      	b.n	8000856 <main+0x86>
 8000854:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <main+0xe0>)
 8000856:	4619      	mov	r1, r3
 8000858:	4819      	ldr	r0, [pc, #100]	; (80008c0 <main+0xf0>)
 800085a:	f002 ffcf 	bl	80037fc <iprintf>
    printf("Message: %s", msg);
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	4619      	mov	r1, r3
 8000862:	4818      	ldr	r0, [pc, #96]	; (80008c4 <main+0xf4>)
 8000864:	f002 ffca 	bl	80037fc <iprintf>
    printf("Message length: %d\r\n", (int)strlen(msg));
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fcd0 	bl	8000210 <strlen>
 8000870:	4603      	mov	r3, r0
 8000872:	4619      	mov	r1, r3
 8000874:	4814      	ldr	r0, [pc, #80]	; (80008c8 <main+0xf8>)
 8000876:	f002 ffc1 	bl	80037fc <iprintf>

    //if(strcmp(msg, "CLOSE\r\n") == 0)
    //   break;

    status = SERIAL_PORT_WriteString(handle, msg);
 800087a:	69bb      	ldr	r3, [r7, #24]
 800087c:	1d3a      	adds	r2, r7, #4
 800087e:	4611      	mov	r1, r2
 8000880:	4618      	mov	r0, r3
 8000882:	f000 f8dd 	bl	8000a40 <SERIAL_PORT_WriteString>
 8000886:	61f8      	str	r0, [r7, #28]

    printf("Writing status: %s \r\n", (status == 0) ? "OK" : "ERROR");
 8000888:	69fb      	ldr	r3, [r7, #28]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d101      	bne.n	8000892 <main+0xc2>
 800088e:	4b07      	ldr	r3, [pc, #28]	; (80008ac <main+0xdc>)
 8000890:	e000      	b.n	8000894 <main+0xc4>
 8000892:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <main+0xe0>)
 8000894:	4619      	mov	r1, r3
 8000896:	4809      	ldr	r0, [pc, #36]	; (80008bc <main+0xec>)
 8000898:	f002 ffb0 	bl	80037fc <iprintf>

    memset(msg, 0, sizeof(msg));
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	2214      	movs	r2, #20
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f002 ffa2 	bl	80037ec <memset>
    status = SERIAL_PORT_ReadLine(handle, msg);
 80008a8:	e7c8      	b.n	800083c <main+0x6c>
 80008aa:	bf00      	nop
 80008ac:	080046c0 	.word	0x080046c0
 80008b0:	080046c4 	.word	0x080046c4
 80008b4:	080046cc 	.word	0x080046cc
 80008b8:	080046ec 	.word	0x080046ec
 80008bc:	080046fc 	.word	0x080046fc
 80008c0:	08004714 	.word	0x08004714
 80008c4:	0800472c 	.word	0x0800472c
 80008c8:	08004738 	.word	0x08004738

080008cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b0b4      	sub	sp, #208	; 0xd0
 80008d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80008d6:	2230      	movs	r2, #48	; 0x30
 80008d8:	2100      	movs	r1, #0
 80008da:	4618      	mov	r0, r3
 80008dc:	f002 ff86 	bl	80037ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008f0:	f107 0308 	add.w	r3, r7, #8
 80008f4:	2284      	movs	r2, #132	; 0x84
 80008f6:	2100      	movs	r1, #0
 80008f8:	4618      	mov	r0, r3
 80008fa:	f002 ff77 	bl	80037ec <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008fe:	f000 fed5 	bl	80016ac <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	4b37      	ldr	r3, [pc, #220]	; (80009e0 <SystemClock_Config+0x114>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	4a36      	ldr	r2, [pc, #216]	; (80009e0 <SystemClock_Config+0x114>)
 8000908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800090c:	6413      	str	r3, [r2, #64]	; 0x40
 800090e:	4b34      	ldr	r3, [pc, #208]	; (80009e0 <SystemClock_Config+0x114>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800091a:	4b32      	ldr	r3, [pc, #200]	; (80009e4 <SystemClock_Config+0x118>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000922:	4a30      	ldr	r2, [pc, #192]	; (80009e4 <SystemClock_Config+0x118>)
 8000924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000928:	6013      	str	r3, [r2, #0]
 800092a:	4b2e      	ldr	r3, [pc, #184]	; (80009e4 <SystemClock_Config+0x118>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000936:	2301      	movs	r3, #1
 8000938:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800093c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000940:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000944:	2302      	movs	r3, #2
 8000946:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800094a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800094e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000952:	2304      	movs	r3, #4
 8000954:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000958:	2348      	movs	r3, #72	; 0x48
 800095a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800095e:	2302      	movs	r3, #2
 8000960:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000964:	2303      	movs	r3, #3
 8000966:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800096a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800096e:	4618      	mov	r0, r3
 8000970:	f000 feac 	bl	80016cc <HAL_RCC_OscConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800097a:	f000 f84b 	bl	8000a14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097e:	230f      	movs	r3, #15
 8000980:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000984:	2302      	movs	r3, #2
 8000986:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800098a:	2300      	movs	r3, #0
 800098c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000994:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000998:	2300      	movs	r3, #0
 800099a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800099e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80009a2:	2102      	movs	r1, #2
 80009a4:	4618      	mov	r0, r3
 80009a6:	f001 f935 	bl	8001c14 <HAL_RCC_ClockConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80009b0:	f000 f830 	bl	8000a14 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 80009b4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80009b8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009be:	2300      	movs	r3, #0
 80009c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009c2:	f107 0308 	add.w	r3, r7, #8
 80009c6:	4618      	mov	r0, r3
 80009c8:	f001 fb26 	bl	8002018 <HAL_RCCEx_PeriphCLKConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 80009d2:	f000 f81f 	bl	8000a14 <Error_Handler>
  }
}
 80009d6:	bf00      	nop
 80009d8:	37d0      	adds	r7, #208	; 0xd0
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40007000 	.word	0x40007000

080009e8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 0xFFFF);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009fc:	68b9      	ldr	r1, [r7, #8]
 80009fe:	4804      	ldr	r0, [pc, #16]	; (8000a10 <_write+0x28>)
 8000a00:	f001 ff48 	bl	8002894 <HAL_UART_Transmit>
  return len;
 8000a04:	687b      	ldr	r3, [r7, #4]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	2000011c 	.word	0x2000011c

08000a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a18:	b672      	cpsid	i
}
 8000a1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <Error_Handler+0x8>
	...

08000a20 <SERIAL_PORT_Init>:
/* Private function ----------------------------------------------------------*/

/* Public function -----------------------------------------------------------*/

int SERIAL_PORT_Init(SERIAL_PORT_Handle* handle)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  // Get global UARTx handler
  *handle = &huart;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a04      	ldr	r2, [pc, #16]	; (8000a3c <SERIAL_PORT_Init+0x1c>)
 8000a2c:	601a      	str	r2, [r3, #0]
  
  return 0; // OK
 8000a2e:	2300      	movs	r3, #0
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	20000098 	.word	0x20000098

08000a40 <SERIAL_PORT_WriteString>:
{
  return 0; // OK
}

int SERIAL_PORT_WriteString(SERIAL_PORT_Handle handle, char* str)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
  uint16_t len = (uint16_t)strlen(str);
 8000a4a:	6838      	ldr	r0, [r7, #0]
 8000a4c:	f7ff fbe0 	bl	8000210 <strlen>
 8000a50:	4603      	mov	r3, r0
 8000a52:	81fb      	strh	r3, [r7, #14]
  
  HAL_StatusTypeDef Status = HAL_UART_Transmit(handle,        // Handle to the Serial port
 8000a54:	89fa      	ldrh	r2, [r7, #14]
 8000a56:	2364      	movs	r3, #100	; 0x64
 8000a58:	6839      	ldr	r1, [r7, #0]
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f001 ff1a 	bl	8002894 <HAL_UART_Transmit>
 8000a60:	4603      	mov	r3, r0
 8000a62:	737b      	strb	r3, [r7, #13]
                                               (uint8_t*)str, // Data to be written to the port
                                               len,           // Number of bytes to write
                                               TIMEOUT);      // Timeout in ms
   
   if(Status != HAL_OK)
 8000a64:	7b7b      	ldrb	r3, [r7, #13]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d002      	beq.n	8000a70 <SERIAL_PORT_WriteString+0x30>
     return -1; // Can't write to port
 8000a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6e:	e000      	b.n	8000a72 <SERIAL_PORT_WriteString+0x32>
   
   return 0; // OK
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <SERIAL_PORT_ReadLine>:
 
int SERIAL_PORT_ReadLine(SERIAL_PORT_Handle handle, char* str)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b084      	sub	sp, #16
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
 8000a82:	6039      	str	r1, [r7, #0]
  int i = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
  
  do
  {
    // Read single character
    HAL_StatusTypeDef Status = HAL_UART_Receive(handle,            // Handle to the Serial port
 8000a88:	68fb      	ldr	r3, [r7, #12]
                                                (uint8_t*)&str[i], // Data to be read from the port
 8000a8a:	683a      	ldr	r2, [r7, #0]
 8000a8c:	18d1      	adds	r1, r2, r3
    HAL_StatusTypeDef Status = HAL_UART_Receive(handle,            // Handle to the Serial port
 8000a8e:	2364      	movs	r3, #100	; 0x64
 8000a90:	2201      	movs	r2, #1
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f001 ff91 	bl	80029ba <HAL_UART_Receive>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	72fb      	strb	r3, [r7, #11]
                                                1,                 // Number of bytes to read
	                                            TIMEOUT);      // Timeout in ms
    if(Status == HAL_OK)
 8000a9c:	7afb      	ldrb	r3, [r7, #11]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d102      	bne.n	8000aa8 <SERIAL_PORT_ReadLine+0x2e>
      i++;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	60fb      	str	r3, [r7, #12]

    if(Status == HAL_ERROR)
 8000aa8:	7afb      	ldrb	r3, [r7, #11]
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d102      	bne.n	8000ab4 <SERIAL_PORT_ReadLine+0x3a>
      return -1; // Can't read from port
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab2:	e00c      	b.n	8000ace <SERIAL_PORT_ReadLine+0x54>
   
  } while(str[i-1] != '\r'); // Until 'CR' (Enter)
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	683a      	ldr	r2, [r7, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b0d      	cmp	r3, #13
 8000ac0:	d1e2      	bne.n	8000a88 <SERIAL_PORT_ReadLine+0xe>
  
  str[i] = '\n';             // Add 'LF'
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	683a      	ldr	r2, [r7, #0]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	220a      	movs	r2, #10
 8000aca:	701a      	strb	r2, [r3, #0]
  
  return 0; // OK
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <HAL_MspInit+0x44>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	4a0e      	ldr	r2, [pc, #56]	; (8000b1c <HAL_MspInit+0x44>)
 8000ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <HAL_MspInit+0x44>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <HAL_MspInit+0x44>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	4a08      	ldr	r2, [pc, #32]	; (8000b1c <HAL_MspInit+0x44>)
 8000afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b00:	6453      	str	r3, [r2, #68]	; 0x44
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_MspInit+0x44>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800

08000b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <NMI_Handler+0x4>

08000b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <HardFault_Handler+0x4>

08000b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <MemManage_Handler+0x4>

08000b32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <BusFault_Handler+0x4>

08000b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <UsageFault_Handler+0x4>

08000b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6c:	f000 f9f0 	bl	8000f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b78:	4802      	ldr	r0, [pc, #8]	; (8000b84 <USART2_IRQHandler+0x10>)
 8000b7a:	f001 ffef 	bl	8002b5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	2000011c 	.word	0x2000011c

08000b88 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000b8c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b90:	f000 fd68 	bl	8001664 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	e00a      	b.n	8000bc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000baa:	f3af 8000 	nop.w
 8000bae:	4601      	mov	r1, r0
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	1c5a      	adds	r2, r3, #1
 8000bb4:	60ba      	str	r2, [r7, #8]
 8000bb6:	b2ca      	uxtb	r2, r1
 8000bb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	697a      	ldr	r2, [r7, #20]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	dbf0      	blt.n	8000baa <_read+0x12>
	}

return len;
 8000bc8:	687b      	ldr	r3, [r7, #4]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	b083      	sub	sp, #12
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
	return -1;
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bea:	b480      	push	{r7}
 8000bec:	b083      	sub	sp, #12
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
 8000bf2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bfa:	605a      	str	r2, [r3, #4]
	return 0;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <_isatty>:

int _isatty(int file)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
	return 1;
 8000c12:	2301      	movs	r3, #1
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
	return 0;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3714      	adds	r7, #20
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
	...

08000c3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c44:	4a14      	ldr	r2, [pc, #80]	; (8000c98 <_sbrk+0x5c>)
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <_sbrk+0x60>)
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c50:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <_sbrk+0x64>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d102      	bne.n	8000c5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <_sbrk+0x64>)
 8000c5a:	4a12      	ldr	r2, [pc, #72]	; (8000ca4 <_sbrk+0x68>)
 8000c5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d207      	bcs.n	8000c7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c6c:	f002 fd94 	bl	8003798 <__errno>
 8000c70:	4603      	mov	r3, r0
 8000c72:	220c      	movs	r2, #12
 8000c74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c76:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7a:	e009      	b.n	8000c90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <_sbrk+0x64>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c82:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <_sbrk+0x64>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <_sbrk+0x64>)
 8000c8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20050000 	.word	0x20050000
 8000c9c:	00000400 	.word	0x00000400
 8000ca0:	2000008c 	.word	0x2000008c
 8000ca4:	200001b8 	.word	0x200001b8

08000ca8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <SystemInit+0x20>)
 8000cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb2:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <SystemInit+0x20>)
 8000cb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000cd0:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <MX_USART2_UART_Init+0x58>)
 8000cd2:	4a15      	ldr	r2, [pc, #84]	; (8000d28 <MX_USART2_UART_Init+0x5c>)
 8000cd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000cd6:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <MX_USART2_UART_Init+0x58>)
 8000cd8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000cdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <MX_USART2_UART_Init+0x58>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <MX_USART2_UART_Init+0x58>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <MX_USART2_UART_Init+0x58>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <MX_USART2_UART_Init+0x58>)
 8000cf2:	220c      	movs	r2, #12
 8000cf4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <MX_USART2_UART_Init+0x58>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <MX_USART2_UART_Init+0x58>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <MX_USART2_UART_Init+0x58>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MX_USART2_UART_Init+0x58>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MX_USART2_UART_Init+0x58>)
 8000d10:	f001 fd72 	bl	80027f8 <HAL_UART_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d1a:	f7ff fe7b 	bl	8000a14 <Error_Handler>
  }

}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	2000011c 	.word	0x2000011c
 8000d28:	40004400 	.word	0x40004400

08000d2c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <MX_USART3_UART_Init+0x58>)
 8000d32:	4a15      	ldr	r2, [pc, #84]	; (8000d88 <MX_USART3_UART_Init+0x5c>)
 8000d34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000d36:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <MX_USART3_UART_Init+0x58>)
 8000d38:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_USART3_UART_Init+0x58>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <MX_USART3_UART_Init+0x58>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MX_USART3_UART_Init+0x58>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <MX_USART3_UART_Init+0x58>)
 8000d52:	220c      	movs	r2, #12
 8000d54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <MX_USART3_UART_Init+0x58>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <MX_USART3_UART_Init+0x58>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <MX_USART3_UART_Init+0x58>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <MX_USART3_UART_Init+0x58>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <MX_USART3_UART_Init+0x58>)
 8000d70:	f001 fd42 	bl	80027f8 <HAL_UART_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d7a:	f7ff fe4b 	bl	8000a14 <Error_Handler>
  }

}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000098 	.word	0x20000098
 8000d88:	40004800 	.word	0x40004800

08000d8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08c      	sub	sp, #48	; 0x30
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 031c 	add.w	r3, r7, #28
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a32      	ldr	r2, [pc, #200]	; (8000e74 <HAL_UART_MspInit+0xe8>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d130      	bne.n	8000e10 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dae:	4b32      	ldr	r3, [pc, #200]	; (8000e78 <HAL_UART_MspInit+0xec>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	4a31      	ldr	r2, [pc, #196]	; (8000e78 <HAL_UART_MspInit+0xec>)
 8000db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dba:	4b2f      	ldr	r3, [pc, #188]	; (8000e78 <HAL_UART_MspInit+0xec>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc2:	61bb      	str	r3, [r7, #24]
 8000dc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc6:	4b2c      	ldr	r3, [pc, #176]	; (8000e78 <HAL_UART_MspInit+0xec>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a2b      	ldr	r2, [pc, #172]	; (8000e78 <HAL_UART_MspInit+0xec>)
 8000dcc:	f043 0308 	orr.w	r3, r3, #8
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b29      	ldr	r3, [pc, #164]	; (8000e78 <HAL_UART_MspInit+0xec>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0308 	and.w	r3, r3, #8
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000dde:	2360      	movs	r3, #96	; 0x60
 8000de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dea:	2303      	movs	r3, #3
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dee:	2307      	movs	r3, #7
 8000df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	4820      	ldr	r0, [pc, #128]	; (8000e7c <HAL_UART_MspInit+0xf0>)
 8000dfa:	f000 fa6d 	bl	80012d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2100      	movs	r1, #0
 8000e02:	2026      	movs	r0, #38	; 0x26
 8000e04:	f000 f99f 	bl	8001146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e08:	2026      	movs	r0, #38	; 0x26
 8000e0a:	f000 f9b8 	bl	800117e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e0e:	e02d      	b.n	8000e6c <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART3)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a1a      	ldr	r2, [pc, #104]	; (8000e80 <HAL_UART_MspInit+0xf4>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d128      	bne.n	8000e6c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e1a:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <HAL_UART_MspInit+0xec>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	4a16      	ldr	r2, [pc, #88]	; (8000e78 <HAL_UART_MspInit+0xec>)
 8000e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e24:	6413      	str	r3, [r2, #64]	; 0x40
 8000e26:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <HAL_UART_MspInit+0xec>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <HAL_UART_MspInit+0xec>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a10      	ldr	r2, [pc, #64]	; (8000e78 <HAL_UART_MspInit+0xec>)
 8000e38:	f043 0308 	orr.w	r3, r3, #8
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <HAL_UART_MspInit+0xec>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0308 	and.w	r3, r3, #8
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e5c:	2307      	movs	r3, #7
 8000e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e60:	f107 031c 	add.w	r3, r7, #28
 8000e64:	4619      	mov	r1, r3
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <HAL_UART_MspInit+0xf0>)
 8000e68:	f000 fa36 	bl	80012d8 <HAL_GPIO_Init>
}
 8000e6c:	bf00      	nop
 8000e6e:	3730      	adds	r7, #48	; 0x30
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40004400 	.word	0x40004400
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40020c00 	.word	0x40020c00
 8000e80:	40004800 	.word	0x40004800

08000e84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ebc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e88:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e8a:	490e      	ldr	r1, [pc, #56]	; (8000ec4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e8c:	4a0e      	ldr	r2, [pc, #56]	; (8000ec8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e90:	e002      	b.n	8000e98 <LoopCopyDataInit>

08000e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e96:	3304      	adds	r3, #4

08000e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e9c:	d3f9      	bcc.n	8000e92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ecc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ea0:	4c0b      	ldr	r4, [pc, #44]	; (8000ed0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea4:	e001      	b.n	8000eaa <LoopFillZerobss>

08000ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea8:	3204      	adds	r2, #4

08000eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eac:	d3fb      	bcc.n	8000ea6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eae:	f7ff fefb 	bl	8000ca8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eb2:	f002 fc77 	bl	80037a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eb6:	f7ff fc8b 	bl	80007d0 <main>
  bx  lr    
 8000eba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ebc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000ec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ec8:	08004810 	.word	0x08004810
  ldr r2, =_sbss
 8000ecc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ed0:	200001b4 	.word	0x200001b4

08000ed4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed4:	e7fe      	b.n	8000ed4 <ADC_IRQHandler>

08000ed6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eda:	2003      	movs	r0, #3
 8000edc:	f000 f928 	bl	8001130 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f000 f805 	bl	8000ef0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000ee6:	f7ff fdf7 	bl	8000ad8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000eea:	2300      	movs	r3, #0
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_InitTick+0x54>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <HAL_InitTick+0x58>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4619      	mov	r1, r3
 8000f02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 f943 	bl	800119a <HAL_SYSTICK_Config>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00e      	b.n	8000f3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b0f      	cmp	r3, #15
 8000f22:	d80a      	bhi.n	8000f3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f24:	2200      	movs	r2, #0
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f000 f90b 	bl	8001146 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f30:	4a06      	ldr	r2, [pc, #24]	; (8000f4c <HAL_InitTick+0x5c>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	e000      	b.n	8000f3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000000 	.word	0x20000000
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	20000004 	.word	0x20000004

08000f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_IncTick+0x20>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_IncTick+0x24>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <HAL_IncTick+0x24>)
 8000f62:	6013      	str	r3, [r2, #0]
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000008 	.word	0x20000008
 8000f74:	200001a0 	.word	0x200001a0

08000f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_GetTick+0x14>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	200001a0 	.word	0x200001a0

08000f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <__NVIC_SetPriorityGrouping+0x40>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fac:	4013      	ands	r3, r2
 8000fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fbe:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <__NVIC_SetPriorityGrouping+0x40>)
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	60d3      	str	r3, [r2, #12]
}
 8000fc4:	bf00      	nop
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00
 8000fd4:	05fa0000 	.word	0x05fa0000

08000fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	0a1b      	lsrs	r3, r3, #8
 8000fe2:	f003 0307 	and.w	r3, r3, #7
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	2b00      	cmp	r3, #0
 8001004:	db0b      	blt.n	800101e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	f003 021f 	and.w	r2, r3, #31
 800100c:	4907      	ldr	r1, [pc, #28]	; (800102c <__NVIC_EnableIRQ+0x38>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	095b      	lsrs	r3, r3, #5
 8001014:	2001      	movs	r0, #1
 8001016:	fa00 f202 	lsl.w	r2, r0, r2
 800101a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000e100 	.word	0xe000e100

08001030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	db0a      	blt.n	800105a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	b2da      	uxtb	r2, r3
 8001048:	490c      	ldr	r1, [pc, #48]	; (800107c <__NVIC_SetPriority+0x4c>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	0112      	lsls	r2, r2, #4
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	440b      	add	r3, r1
 8001054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001058:	e00a      	b.n	8001070 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4908      	ldr	r1, [pc, #32]	; (8001080 <__NVIC_SetPriority+0x50>)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	f003 030f 	and.w	r3, r3, #15
 8001066:	3b04      	subs	r3, #4
 8001068:	0112      	lsls	r2, r2, #4
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	440b      	add	r3, r1
 800106e:	761a      	strb	r2, [r3, #24]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000e100 	.word	0xe000e100
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001084:	b480      	push	{r7}
 8001086:	b089      	sub	sp, #36	; 0x24
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f1c3 0307 	rsb	r3, r3, #7
 800109e:	2b04      	cmp	r3, #4
 80010a0:	bf28      	it	cs
 80010a2:	2304      	movcs	r3, #4
 80010a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3304      	adds	r3, #4
 80010aa:	2b06      	cmp	r3, #6
 80010ac:	d902      	bls.n	80010b4 <NVIC_EncodePriority+0x30>
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3b03      	subs	r3, #3
 80010b2:	e000      	b.n	80010b6 <NVIC_EncodePriority+0x32>
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b8:	f04f 32ff 	mov.w	r2, #4294967295
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43da      	mvns	r2, r3
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	401a      	ands	r2, r3
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010cc:	f04f 31ff 	mov.w	r1, #4294967295
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	fa01 f303 	lsl.w	r3, r1, r3
 80010d6:	43d9      	mvns	r1, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	4313      	orrs	r3, r2
         );
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3724      	adds	r7, #36	; 0x24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
	...

080010ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010fc:	d301      	bcc.n	8001102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fe:	2301      	movs	r3, #1
 8001100:	e00f      	b.n	8001122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001102:	4a0a      	ldr	r2, [pc, #40]	; (800112c <SysTick_Config+0x40>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800110a:	210f      	movs	r1, #15
 800110c:	f04f 30ff 	mov.w	r0, #4294967295
 8001110:	f7ff ff8e 	bl	8001030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <SysTick_Config+0x40>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111a:	4b04      	ldr	r3, [pc, #16]	; (800112c <SysTick_Config+0x40>)
 800111c:	2207      	movs	r2, #7
 800111e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	e000e010 	.word	0xe000e010

08001130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff ff29 	bl	8000f90 <__NVIC_SetPriorityGrouping>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001146:	b580      	push	{r7, lr}
 8001148:	b086      	sub	sp, #24
 800114a:	af00      	add	r7, sp, #0
 800114c:	4603      	mov	r3, r0
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	607a      	str	r2, [r7, #4]
 8001152:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001158:	f7ff ff3e 	bl	8000fd8 <__NVIC_GetPriorityGrouping>
 800115c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	68b9      	ldr	r1, [r7, #8]
 8001162:	6978      	ldr	r0, [r7, #20]
 8001164:	f7ff ff8e 	bl	8001084 <NVIC_EncodePriority>
 8001168:	4602      	mov	r2, r0
 800116a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116e:	4611      	mov	r1, r2
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff5d 	bl	8001030 <__NVIC_SetPriority>
}
 8001176:	bf00      	nop
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	4603      	mov	r3, r0
 8001186:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff31 	bl	8000ff4 <__NVIC_EnableIRQ>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ffa2 	bl	80010ec <SysTick_Config>
 80011a8:	4603      	mov	r3, r0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b084      	sub	sp, #16
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011be:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011c0:	f7ff feda 	bl	8000f78 <HAL_GetTick>
 80011c4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d008      	beq.n	80011e4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2280      	movs	r2, #128	; 0x80
 80011d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e052      	b.n	800128a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f022 0216 	bic.w	r2, r2, #22
 80011f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	695a      	ldr	r2, [r3, #20]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001202:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001208:	2b00      	cmp	r3, #0
 800120a:	d103      	bne.n	8001214 <HAL_DMA_Abort+0x62>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001210:	2b00      	cmp	r3, #0
 8001212:	d007      	beq.n	8001224 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f022 0208 	bic.w	r2, r2, #8
 8001222:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 0201 	bic.w	r2, r2, #1
 8001232:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001234:	e013      	b.n	800125e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001236:	f7ff fe9f 	bl	8000f78 <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b05      	cmp	r3, #5
 8001242:	d90c      	bls.n	800125e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2220      	movs	r2, #32
 8001248:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2203      	movs	r2, #3
 8001256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e015      	b.n	800128a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1e4      	bne.n	8001236 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001270:	223f      	movs	r2, #63	; 0x3f
 8001272:	409a      	lsls	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2201      	movs	r2, #1
 8001284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d004      	beq.n	80012b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2280      	movs	r2, #128	; 0x80
 80012aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e00c      	b.n	80012ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2205      	movs	r2, #5
 80012b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f022 0201 	bic.w	r2, r2, #1
 80012c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d8:	b480      	push	{r7}
 80012da:	b089      	sub	sp, #36	; 0x24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80012e6:	2300      	movs	r3, #0
 80012e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
 80012f6:	e175      	b.n	80015e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80012f8:	2201      	movs	r2, #1
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	4013      	ands	r3, r2
 800130a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	429a      	cmp	r2, r3
 8001312:	f040 8164 	bne.w	80015de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d00b      	beq.n	8001336 <HAL_GPIO_Init+0x5e>
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b02      	cmp	r3, #2
 8001324:	d007      	beq.n	8001336 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800132a:	2b11      	cmp	r3, #17
 800132c:	d003      	beq.n	8001336 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2b12      	cmp	r3, #18
 8001334:	d130      	bne.n	8001398 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	2203      	movs	r2, #3
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4013      	ands	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	68da      	ldr	r2, [r3, #12]
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4313      	orrs	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800136c:	2201      	movs	r2, #1
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	091b      	lsrs	r3, r3, #4
 8001382:	f003 0201 	and.w	r2, r3, #1
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	2203      	movs	r2, #3
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d003      	beq.n	80013d8 <HAL_GPIO_Init+0x100>
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2b12      	cmp	r3, #18
 80013d6:	d123      	bne.n	8001420 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	08da      	lsrs	r2, r3, #3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3208      	adds	r2, #8
 80013e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	f003 0307 	and.w	r3, r3, #7
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	220f      	movs	r2, #15
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	691a      	ldr	r2, [r3, #16]
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	08da      	lsrs	r2, r3, #3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3208      	adds	r2, #8
 800141a:	69b9      	ldr	r1, [r7, #24]
 800141c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	2203      	movs	r2, #3
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 0203 	and.w	r2, r3, #3
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145c:	2b00      	cmp	r3, #0
 800145e:	f000 80be 	beq.w	80015de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001462:	4b66      	ldr	r3, [pc, #408]	; (80015fc <HAL_GPIO_Init+0x324>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	4a65      	ldr	r2, [pc, #404]	; (80015fc <HAL_GPIO_Init+0x324>)
 8001468:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800146c:	6453      	str	r3, [r2, #68]	; 0x44
 800146e:	4b63      	ldr	r3, [pc, #396]	; (80015fc <HAL_GPIO_Init+0x324>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800147a:	4a61      	ldr	r2, [pc, #388]	; (8001600 <HAL_GPIO_Init+0x328>)
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	089b      	lsrs	r3, r3, #2
 8001480:	3302      	adds	r3, #2
 8001482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f003 0303 	and.w	r3, r3, #3
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	220f      	movs	r2, #15
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a58      	ldr	r2, [pc, #352]	; (8001604 <HAL_GPIO_Init+0x32c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d037      	beq.n	8001516 <HAL_GPIO_Init+0x23e>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a57      	ldr	r2, [pc, #348]	; (8001608 <HAL_GPIO_Init+0x330>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d031      	beq.n	8001512 <HAL_GPIO_Init+0x23a>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a56      	ldr	r2, [pc, #344]	; (800160c <HAL_GPIO_Init+0x334>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d02b      	beq.n	800150e <HAL_GPIO_Init+0x236>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a55      	ldr	r2, [pc, #340]	; (8001610 <HAL_GPIO_Init+0x338>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d025      	beq.n	800150a <HAL_GPIO_Init+0x232>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a54      	ldr	r2, [pc, #336]	; (8001614 <HAL_GPIO_Init+0x33c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d01f      	beq.n	8001506 <HAL_GPIO_Init+0x22e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a53      	ldr	r2, [pc, #332]	; (8001618 <HAL_GPIO_Init+0x340>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d019      	beq.n	8001502 <HAL_GPIO_Init+0x22a>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a52      	ldr	r2, [pc, #328]	; (800161c <HAL_GPIO_Init+0x344>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d013      	beq.n	80014fe <HAL_GPIO_Init+0x226>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a51      	ldr	r2, [pc, #324]	; (8001620 <HAL_GPIO_Init+0x348>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d00d      	beq.n	80014fa <HAL_GPIO_Init+0x222>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a50      	ldr	r2, [pc, #320]	; (8001624 <HAL_GPIO_Init+0x34c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d007      	beq.n	80014f6 <HAL_GPIO_Init+0x21e>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a4f      	ldr	r2, [pc, #316]	; (8001628 <HAL_GPIO_Init+0x350>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d101      	bne.n	80014f2 <HAL_GPIO_Init+0x21a>
 80014ee:	2309      	movs	r3, #9
 80014f0:	e012      	b.n	8001518 <HAL_GPIO_Init+0x240>
 80014f2:	230a      	movs	r3, #10
 80014f4:	e010      	b.n	8001518 <HAL_GPIO_Init+0x240>
 80014f6:	2308      	movs	r3, #8
 80014f8:	e00e      	b.n	8001518 <HAL_GPIO_Init+0x240>
 80014fa:	2307      	movs	r3, #7
 80014fc:	e00c      	b.n	8001518 <HAL_GPIO_Init+0x240>
 80014fe:	2306      	movs	r3, #6
 8001500:	e00a      	b.n	8001518 <HAL_GPIO_Init+0x240>
 8001502:	2305      	movs	r3, #5
 8001504:	e008      	b.n	8001518 <HAL_GPIO_Init+0x240>
 8001506:	2304      	movs	r3, #4
 8001508:	e006      	b.n	8001518 <HAL_GPIO_Init+0x240>
 800150a:	2303      	movs	r3, #3
 800150c:	e004      	b.n	8001518 <HAL_GPIO_Init+0x240>
 800150e:	2302      	movs	r3, #2
 8001510:	e002      	b.n	8001518 <HAL_GPIO_Init+0x240>
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <HAL_GPIO_Init+0x240>
 8001516:	2300      	movs	r3, #0
 8001518:	69fa      	ldr	r2, [r7, #28]
 800151a:	f002 0203 	and.w	r2, r2, #3
 800151e:	0092      	lsls	r2, r2, #2
 8001520:	4093      	lsls	r3, r2
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001528:	4935      	ldr	r1, [pc, #212]	; (8001600 <HAL_GPIO_Init+0x328>)
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	089b      	lsrs	r3, r3, #2
 800152e:	3302      	adds	r3, #2
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001536:	4b3d      	ldr	r3, [pc, #244]	; (800162c <HAL_GPIO_Init+0x354>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	43db      	mvns	r3, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4013      	ands	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800155a:	4a34      	ldr	r2, [pc, #208]	; (800162c <HAL_GPIO_Init+0x354>)
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001560:	4b32      	ldr	r3, [pc, #200]	; (800162c <HAL_GPIO_Init+0x354>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001584:	4a29      	ldr	r2, [pc, #164]	; (800162c <HAL_GPIO_Init+0x354>)
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800158a:	4b28      	ldr	r3, [pc, #160]	; (800162c <HAL_GPIO_Init+0x354>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	43db      	mvns	r3, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015ae:	4a1f      	ldr	r2, [pc, #124]	; (800162c <HAL_GPIO_Init+0x354>)
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015b4:	4b1d      	ldr	r3, [pc, #116]	; (800162c <HAL_GPIO_Init+0x354>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015d8:	4a14      	ldr	r2, [pc, #80]	; (800162c <HAL_GPIO_Init+0x354>)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3301      	adds	r3, #1
 80015e2:	61fb      	str	r3, [r7, #28]
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	2b0f      	cmp	r3, #15
 80015e8:	f67f ae86 	bls.w	80012f8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	3724      	adds	r7, #36	; 0x24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800
 8001600:	40013800 	.word	0x40013800
 8001604:	40020000 	.word	0x40020000
 8001608:	40020400 	.word	0x40020400
 800160c:	40020800 	.word	0x40020800
 8001610:	40020c00 	.word	0x40020c00
 8001614:	40021000 	.word	0x40021000
 8001618:	40021400 	.word	0x40021400
 800161c:	40021800 	.word	0x40021800
 8001620:	40021c00 	.word	0x40021c00
 8001624:	40022000 	.word	0x40022000
 8001628:	40022400 	.word	0x40022400
 800162c:	40013c00 	.word	0x40013c00

08001630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	807b      	strh	r3, [r7, #2]
 800163c:	4613      	mov	r3, r2
 800163e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001640:	787b      	ldrb	r3, [r7, #1]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001646:	887a      	ldrh	r2, [r7, #2]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800164c:	e003      	b.n	8001656 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800164e:	887b      	ldrh	r3, [r7, #2]
 8001650:	041a      	lsls	r2, r3, #16
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	619a      	str	r2, [r3, #24]
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
	...

08001664 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800166e:	4b08      	ldr	r3, [pc, #32]	; (8001690 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001670:	695a      	ldr	r2, [r3, #20]
 8001672:	88fb      	ldrh	r3, [r7, #6]
 8001674:	4013      	ands	r3, r2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d006      	beq.n	8001688 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800167a:	4a05      	ldr	r2, [pc, #20]	; (8001690 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001680:	88fb      	ldrh	r3, [r7, #6]
 8001682:	4618      	mov	r0, r3
 8001684:	f000 f806 	bl	8001694 <HAL_GPIO_EXTI_Callback>
  }
}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40013c00 	.word	0x40013c00

08001694 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
	...

080016ac <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ba:	6013      	str	r3, [r2, #0]
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40007000 	.word	0x40007000

080016cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80016d4:	2300      	movs	r3, #0
 80016d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e291      	b.n	8001c06 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 8087 	beq.w	80017fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016f0:	4b96      	ldr	r3, [pc, #600]	; (800194c <HAL_RCC_OscConfig+0x280>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f003 030c 	and.w	r3, r3, #12
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	d00c      	beq.n	8001716 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016fc:	4b93      	ldr	r3, [pc, #588]	; (800194c <HAL_RCC_OscConfig+0x280>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f003 030c 	and.w	r3, r3, #12
 8001704:	2b08      	cmp	r3, #8
 8001706:	d112      	bne.n	800172e <HAL_RCC_OscConfig+0x62>
 8001708:	4b90      	ldr	r3, [pc, #576]	; (800194c <HAL_RCC_OscConfig+0x280>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001710:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001714:	d10b      	bne.n	800172e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001716:	4b8d      	ldr	r3, [pc, #564]	; (800194c <HAL_RCC_OscConfig+0x280>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d06c      	beq.n	80017fc <HAL_RCC_OscConfig+0x130>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d168      	bne.n	80017fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e26b      	b.n	8001c06 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001736:	d106      	bne.n	8001746 <HAL_RCC_OscConfig+0x7a>
 8001738:	4b84      	ldr	r3, [pc, #528]	; (800194c <HAL_RCC_OscConfig+0x280>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a83      	ldr	r2, [pc, #524]	; (800194c <HAL_RCC_OscConfig+0x280>)
 800173e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	e02e      	b.n	80017a4 <HAL_RCC_OscConfig+0xd8>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10c      	bne.n	8001768 <HAL_RCC_OscConfig+0x9c>
 800174e:	4b7f      	ldr	r3, [pc, #508]	; (800194c <HAL_RCC_OscConfig+0x280>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a7e      	ldr	r2, [pc, #504]	; (800194c <HAL_RCC_OscConfig+0x280>)
 8001754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	4b7c      	ldr	r3, [pc, #496]	; (800194c <HAL_RCC_OscConfig+0x280>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a7b      	ldr	r2, [pc, #492]	; (800194c <HAL_RCC_OscConfig+0x280>)
 8001760:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	e01d      	b.n	80017a4 <HAL_RCC_OscConfig+0xd8>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001770:	d10c      	bne.n	800178c <HAL_RCC_OscConfig+0xc0>
 8001772:	4b76      	ldr	r3, [pc, #472]	; (800194c <HAL_RCC_OscConfig+0x280>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a75      	ldr	r2, [pc, #468]	; (800194c <HAL_RCC_OscConfig+0x280>)
 8001778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	4b73      	ldr	r3, [pc, #460]	; (800194c <HAL_RCC_OscConfig+0x280>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a72      	ldr	r2, [pc, #456]	; (800194c <HAL_RCC_OscConfig+0x280>)
 8001784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	e00b      	b.n	80017a4 <HAL_RCC_OscConfig+0xd8>
 800178c:	4b6f      	ldr	r3, [pc, #444]	; (800194c <HAL_RCC_OscConfig+0x280>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a6e      	ldr	r2, [pc, #440]	; (800194c <HAL_RCC_OscConfig+0x280>)
 8001792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	4b6c      	ldr	r3, [pc, #432]	; (800194c <HAL_RCC_OscConfig+0x280>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a6b      	ldr	r2, [pc, #428]	; (800194c <HAL_RCC_OscConfig+0x280>)
 800179e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d013      	beq.n	80017d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ac:	f7ff fbe4 	bl	8000f78 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b4:	f7ff fbe0 	bl	8000f78 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b64      	cmp	r3, #100	; 0x64
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e21f      	b.n	8001c06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c6:	4b61      	ldr	r3, [pc, #388]	; (800194c <HAL_RCC_OscConfig+0x280>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f0      	beq.n	80017b4 <HAL_RCC_OscConfig+0xe8>
 80017d2:	e014      	b.n	80017fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d4:	f7ff fbd0 	bl	8000f78 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017dc:	f7ff fbcc 	bl	8000f78 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b64      	cmp	r3, #100	; 0x64
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e20b      	b.n	8001c06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ee:	4b57      	ldr	r3, [pc, #348]	; (800194c <HAL_RCC_OscConfig+0x280>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0x110>
 80017fa:	e000      	b.n	80017fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d069      	beq.n	80018de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800180a:	4b50      	ldr	r3, [pc, #320]	; (800194c <HAL_RCC_OscConfig+0x280>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 030c 	and.w	r3, r3, #12
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00b      	beq.n	800182e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001816:	4b4d      	ldr	r3, [pc, #308]	; (800194c <HAL_RCC_OscConfig+0x280>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 030c 	and.w	r3, r3, #12
 800181e:	2b08      	cmp	r3, #8
 8001820:	d11c      	bne.n	800185c <HAL_RCC_OscConfig+0x190>
 8001822:	4b4a      	ldr	r3, [pc, #296]	; (800194c <HAL_RCC_OscConfig+0x280>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d116      	bne.n	800185c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800182e:	4b47      	ldr	r3, [pc, #284]	; (800194c <HAL_RCC_OscConfig+0x280>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d005      	beq.n	8001846 <HAL_RCC_OscConfig+0x17a>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d001      	beq.n	8001846 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e1df      	b.n	8001c06 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001846:	4b41      	ldr	r3, [pc, #260]	; (800194c <HAL_RCC_OscConfig+0x280>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	493d      	ldr	r1, [pc, #244]	; (800194c <HAL_RCC_OscConfig+0x280>)
 8001856:	4313      	orrs	r3, r2
 8001858:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800185a:	e040      	b.n	80018de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d023      	beq.n	80018ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001864:	4b39      	ldr	r3, [pc, #228]	; (800194c <HAL_RCC_OscConfig+0x280>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a38      	ldr	r2, [pc, #224]	; (800194c <HAL_RCC_OscConfig+0x280>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001870:	f7ff fb82 	bl	8000f78 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001878:	f7ff fb7e 	bl	8000f78 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e1bd      	b.n	8001c06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188a:	4b30      	ldr	r3, [pc, #192]	; (800194c <HAL_RCC_OscConfig+0x280>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0f0      	beq.n	8001878 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001896:	4b2d      	ldr	r3, [pc, #180]	; (800194c <HAL_RCC_OscConfig+0x280>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	4929      	ldr	r1, [pc, #164]	; (800194c <HAL_RCC_OscConfig+0x280>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	600b      	str	r3, [r1, #0]
 80018aa:	e018      	b.n	80018de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ac:	4b27      	ldr	r3, [pc, #156]	; (800194c <HAL_RCC_OscConfig+0x280>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a26      	ldr	r2, [pc, #152]	; (800194c <HAL_RCC_OscConfig+0x280>)
 80018b2:	f023 0301 	bic.w	r3, r3, #1
 80018b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b8:	f7ff fb5e 	bl	8000f78 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c0:	f7ff fb5a 	bl	8000f78 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e199      	b.n	8001c06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d2:	4b1e      	ldr	r3, [pc, #120]	; (800194c <HAL_RCC_OscConfig+0x280>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f0      	bne.n	80018c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d038      	beq.n	800195c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d019      	beq.n	8001926 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018f2:	4b16      	ldr	r3, [pc, #88]	; (800194c <HAL_RCC_OscConfig+0x280>)
 80018f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018f6:	4a15      	ldr	r2, [pc, #84]	; (800194c <HAL_RCC_OscConfig+0x280>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fe:	f7ff fb3b 	bl	8000f78 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001906:	f7ff fb37 	bl	8000f78 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e176      	b.n	8001c06 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <HAL_RCC_OscConfig+0x280>)
 800191a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0f0      	beq.n	8001906 <HAL_RCC_OscConfig+0x23a>
 8001924:	e01a      	b.n	800195c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001926:	4b09      	ldr	r3, [pc, #36]	; (800194c <HAL_RCC_OscConfig+0x280>)
 8001928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800192a:	4a08      	ldr	r2, [pc, #32]	; (800194c <HAL_RCC_OscConfig+0x280>)
 800192c:	f023 0301 	bic.w	r3, r3, #1
 8001930:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001932:	f7ff fb21 	bl	8000f78 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001938:	e00a      	b.n	8001950 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800193a:	f7ff fb1d 	bl	8000f78 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d903      	bls.n	8001950 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e15c      	b.n	8001c06 <HAL_RCC_OscConfig+0x53a>
 800194c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001950:	4b91      	ldr	r3, [pc, #580]	; (8001b98 <HAL_RCC_OscConfig+0x4cc>)
 8001952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1ee      	bne.n	800193a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 80a4 	beq.w	8001ab2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800196a:	4b8b      	ldr	r3, [pc, #556]	; (8001b98 <HAL_RCC_OscConfig+0x4cc>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10d      	bne.n	8001992 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001976:	4b88      	ldr	r3, [pc, #544]	; (8001b98 <HAL_RCC_OscConfig+0x4cc>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	4a87      	ldr	r2, [pc, #540]	; (8001b98 <HAL_RCC_OscConfig+0x4cc>)
 800197c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001980:	6413      	str	r3, [r2, #64]	; 0x40
 8001982:	4b85      	ldr	r3, [pc, #532]	; (8001b98 <HAL_RCC_OscConfig+0x4cc>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198a:	60bb      	str	r3, [r7, #8]
 800198c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800198e:	2301      	movs	r3, #1
 8001990:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001992:	4b82      	ldr	r3, [pc, #520]	; (8001b9c <HAL_RCC_OscConfig+0x4d0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199a:	2b00      	cmp	r3, #0
 800199c:	d118      	bne.n	80019d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800199e:	4b7f      	ldr	r3, [pc, #508]	; (8001b9c <HAL_RCC_OscConfig+0x4d0>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a7e      	ldr	r2, [pc, #504]	; (8001b9c <HAL_RCC_OscConfig+0x4d0>)
 80019a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019aa:	f7ff fae5 	bl	8000f78 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019b2:	f7ff fae1 	bl	8000f78 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b64      	cmp	r3, #100	; 0x64
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e120      	b.n	8001c06 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019c4:	4b75      	ldr	r3, [pc, #468]	; (8001b9c <HAL_RCC_OscConfig+0x4d0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0f0      	beq.n	80019b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d106      	bne.n	80019e6 <HAL_RCC_OscConfig+0x31a>
 80019d8:	4b6f      	ldr	r3, [pc, #444]	; (8001b98 <HAL_RCC_OscConfig+0x4cc>)
 80019da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019dc:	4a6e      	ldr	r2, [pc, #440]	; (8001b98 <HAL_RCC_OscConfig+0x4cc>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	6713      	str	r3, [r2, #112]	; 0x70
 80019e4:	e02d      	b.n	8001a42 <HAL_RCC_OscConfig+0x376>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10c      	bne.n	8001a08 <HAL_RCC_OscConfig+0x33c>
 80019ee:	4b6a      	ldr	r3, [pc, #424]	; (8001b98 <HAL_RCC_OscConfig+0x4cc>)
 80019f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f2:	4a69      	ldr	r2, [pc, #420]	; (8001b98 <HAL_RCC_OscConfig+0x4cc>)
 80019f4:	f023 0301 	bic.w	r3, r3, #1
 80019f8:	6713      	str	r3, [r2, #112]	; 0x70
 80019fa:	4b67      	ldr	r3, [pc, #412]	; (8001b98 <HAL_RCC_OscConfig+0x4cc>)
 80019fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fe:	4a66      	ldr	r2, [pc, #408]	; (8001b98 <HAL_RCC_OscConfig+0x4cc>)
 8001a00:	f023 0304 	bic.w	r3, r3, #4
 8001a04:	6713      	str	r3, [r2, #112]	; 0x70
 8001a06:	e01c      	b.n	8001a42 <HAL_RCC_OscConfig+0x376>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	2b05      	cmp	r3, #5
 8001a0e:	d10c      	bne.n	8001a2a <HAL_RCC_OscConfig+0x35e>
 8001a10:	4b61      	ldr	r3, [pc, #388]	; (8001b98 <HAL_RCC_OscConfig+0x4cc>)
 8001a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a14:	4a60      	ldr	r2, [pc, #384]	; (8001b98 <HAL_RCC_OscConfig+0x4cc>)
 8001a16:	f043 0304 	orr.w	r3, r3, #4
 8001a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a1c:	4b5e      	ldr	r3, [pc, #376]	; (8001b98 <HAL_RCC_OscConfig+0x4cc>)
 8001a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a20:	4a5d      	ldr	r2, [pc, #372]	; (8001b98 <HAL_RCC_OscConfig+0x4cc>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	6713      	str	r3, [r2, #112]	; 0x70
 8001a28:	e00b      	b.n	8001a42 <HAL_RCC_OscConfig+0x376>
 8001a2a:	4b5b      	ldr	r3, [pc, #364]	; (8001b98 <HAL_RCC_OscConfig+0x4cc>)
 8001a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a2e:	4a5a      	ldr	r2, [pc, #360]	; (8001b98 <HAL_RCC_OscConfig+0x4cc>)
 8001a30:	f023 0301 	bic.w	r3, r3, #1
 8001a34:	6713      	str	r3, [r2, #112]	; 0x70
 8001a36:	4b58      	ldr	r3, [pc, #352]	; (8001b98 <HAL_RCC_OscConfig+0x4cc>)
 8001a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3a:	4a57      	ldr	r2, [pc, #348]	; (8001b98 <HAL_RCC_OscConfig+0x4cc>)
 8001a3c:	f023 0304 	bic.w	r3, r3, #4
 8001a40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d015      	beq.n	8001a76 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4a:	f7ff fa95 	bl	8000f78 <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a50:	e00a      	b.n	8001a68 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a52:	f7ff fa91 	bl	8000f78 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e0ce      	b.n	8001c06 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a68:	4b4b      	ldr	r3, [pc, #300]	; (8001b98 <HAL_RCC_OscConfig+0x4cc>)
 8001a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0ee      	beq.n	8001a52 <HAL_RCC_OscConfig+0x386>
 8001a74:	e014      	b.n	8001aa0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a76:	f7ff fa7f 	bl	8000f78 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a7c:	e00a      	b.n	8001a94 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7e:	f7ff fa7b 	bl	8000f78 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e0b8      	b.n	8001c06 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a94:	4b40      	ldr	r3, [pc, #256]	; (8001b98 <HAL_RCC_OscConfig+0x4cc>)
 8001a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1ee      	bne.n	8001a7e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001aa0:	7dfb      	ldrb	r3, [r7, #23]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d105      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa6:	4b3c      	ldr	r3, [pc, #240]	; (8001b98 <HAL_RCC_OscConfig+0x4cc>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	4a3b      	ldr	r2, [pc, #236]	; (8001b98 <HAL_RCC_OscConfig+0x4cc>)
 8001aac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 80a4 	beq.w	8001c04 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001abc:	4b36      	ldr	r3, [pc, #216]	; (8001b98 <HAL_RCC_OscConfig+0x4cc>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f003 030c 	and.w	r3, r3, #12
 8001ac4:	2b08      	cmp	r3, #8
 8001ac6:	d06b      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d149      	bne.n	8001b64 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad0:	4b31      	ldr	r3, [pc, #196]	; (8001b98 <HAL_RCC_OscConfig+0x4cc>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a30      	ldr	r2, [pc, #192]	; (8001b98 <HAL_RCC_OscConfig+0x4cc>)
 8001ad6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff fa4c 	bl	8000f78 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae4:	f7ff fa48 	bl	8000f78 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e087      	b.n	8001c06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af6:	4b28      	ldr	r3, [pc, #160]	; (8001b98 <HAL_RCC_OscConfig+0x4cc>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69da      	ldr	r2, [r3, #28]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b10:	019b      	lsls	r3, r3, #6
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b18:	085b      	lsrs	r3, r3, #1
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	041b      	lsls	r3, r3, #16
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b24:	061b      	lsls	r3, r3, #24
 8001b26:	4313      	orrs	r3, r2
 8001b28:	4a1b      	ldr	r2, [pc, #108]	; (8001b98 <HAL_RCC_OscConfig+0x4cc>)
 8001b2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001b2e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b30:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <HAL_RCC_OscConfig+0x4cc>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a18      	ldr	r2, [pc, #96]	; (8001b98 <HAL_RCC_OscConfig+0x4cc>)
 8001b36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3c:	f7ff fa1c 	bl	8000f78 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b44:	f7ff fa18 	bl	8000f78 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e057      	b.n	8001c06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b56:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <HAL_RCC_OscConfig+0x4cc>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0x478>
 8001b62:	e04f      	b.n	8001c04 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <HAL_RCC_OscConfig+0x4cc>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a0b      	ldr	r2, [pc, #44]	; (8001b98 <HAL_RCC_OscConfig+0x4cc>)
 8001b6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b70:	f7ff fa02 	bl	8000f78 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b78:	f7ff f9fe 	bl	8000f78 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e03d      	b.n	8001c06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b8a:	4b03      	ldr	r3, [pc, #12]	; (8001b98 <HAL_RCC_OscConfig+0x4cc>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f0      	bne.n	8001b78 <HAL_RCC_OscConfig+0x4ac>
 8001b96:	e035      	b.n	8001c04 <HAL_RCC_OscConfig+0x538>
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <HAL_RCC_OscConfig+0x544>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d028      	beq.n	8001c00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d121      	bne.n	8001c00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d11a      	bne.n	8001c00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bd6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d111      	bne.n	8001c00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be6:	085b      	lsrs	r3, r3, #1
 8001be8:	3b01      	subs	r3, #1
 8001bea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d107      	bne.n	8001c00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d001      	beq.n	8001c04 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e000      	b.n	8001c06 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40023800 	.word	0x40023800

08001c14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e0d0      	b.n	8001dce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c2c:	4b6a      	ldr	r3, [pc, #424]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 030f 	and.w	r3, r3, #15
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d910      	bls.n	8001c5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3a:	4b67      	ldr	r3, [pc, #412]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f023 020f 	bic.w	r2, r3, #15
 8001c42:	4965      	ldr	r1, [pc, #404]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4a:	4b63      	ldr	r3, [pc, #396]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d001      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0b8      	b.n	8001dce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d020      	beq.n	8001caa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d005      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c74:	4b59      	ldr	r3, [pc, #356]	; (8001ddc <HAL_RCC_ClockConfig+0x1c8>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	4a58      	ldr	r2, [pc, #352]	; (8001ddc <HAL_RCC_ClockConfig+0x1c8>)
 8001c7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0308 	and.w	r3, r3, #8
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c8c:	4b53      	ldr	r3, [pc, #332]	; (8001ddc <HAL_RCC_ClockConfig+0x1c8>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	4a52      	ldr	r2, [pc, #328]	; (8001ddc <HAL_RCC_ClockConfig+0x1c8>)
 8001c92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c96:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c98:	4b50      	ldr	r3, [pc, #320]	; (8001ddc <HAL_RCC_ClockConfig+0x1c8>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	494d      	ldr	r1, [pc, #308]	; (8001ddc <HAL_RCC_ClockConfig+0x1c8>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d040      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d107      	bne.n	8001cce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cbe:	4b47      	ldr	r3, [pc, #284]	; (8001ddc <HAL_RCC_ClockConfig+0x1c8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d115      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e07f      	b.n	8001dce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d107      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd6:	4b41      	ldr	r3, [pc, #260]	; (8001ddc <HAL_RCC_ClockConfig+0x1c8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d109      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e073      	b.n	8001dce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce6:	4b3d      	ldr	r3, [pc, #244]	; (8001ddc <HAL_RCC_ClockConfig+0x1c8>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e06b      	b.n	8001dce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cf6:	4b39      	ldr	r3, [pc, #228]	; (8001ddc <HAL_RCC_ClockConfig+0x1c8>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f023 0203 	bic.w	r2, r3, #3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	4936      	ldr	r1, [pc, #216]	; (8001ddc <HAL_RCC_ClockConfig+0x1c8>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d08:	f7ff f936 	bl	8000f78 <HAL_GetTick>
 8001d0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0e:	e00a      	b.n	8001d26 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d10:	f7ff f932 	bl	8000f78 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e053      	b.n	8001dce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d26:	4b2d      	ldr	r3, [pc, #180]	; (8001ddc <HAL_RCC_ClockConfig+0x1c8>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 020c 	and.w	r2, r3, #12
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d1eb      	bne.n	8001d10 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d38:	4b27      	ldr	r3, [pc, #156]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 030f 	and.w	r3, r3, #15
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d210      	bcs.n	8001d68 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d46:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f023 020f 	bic.w	r2, r3, #15
 8001d4e:	4922      	ldr	r1, [pc, #136]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d56:	4b20      	ldr	r3, [pc, #128]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d001      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e032      	b.n	8001dce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d008      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d74:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <HAL_RCC_ClockConfig+0x1c8>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	4916      	ldr	r1, [pc, #88]	; (8001ddc <HAL_RCC_ClockConfig+0x1c8>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0308 	and.w	r3, r3, #8
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d009      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d92:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <HAL_RCC_ClockConfig+0x1c8>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	490e      	ldr	r1, [pc, #56]	; (8001ddc <HAL_RCC_ClockConfig+0x1c8>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001da6:	f000 f821 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 8001daa:	4602      	mov	r2, r0
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_RCC_ClockConfig+0x1c8>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	091b      	lsrs	r3, r3, #4
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	490a      	ldr	r1, [pc, #40]	; (8001de0 <HAL_RCC_ClockConfig+0x1cc>)
 8001db8:	5ccb      	ldrb	r3, [r1, r3]
 8001dba:	fa22 f303 	lsr.w	r3, r2, r3
 8001dbe:	4a09      	ldr	r2, [pc, #36]	; (8001de4 <HAL_RCC_ClockConfig+0x1d0>)
 8001dc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dc2:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <HAL_RCC_ClockConfig+0x1d4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff f892 	bl	8000ef0 <HAL_InitTick>

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40023c00 	.word	0x40023c00
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	08004750 	.word	0x08004750
 8001de4:	20000000 	.word	0x20000000
 8001de8:	20000004 	.word	0x20000004

08001dec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001df0:	b084      	sub	sp, #16
 8001df2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e04:	4b67      	ldr	r3, [pc, #412]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 030c 	and.w	r3, r3, #12
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	d00d      	beq.n	8001e2c <HAL_RCC_GetSysClockFreq+0x40>
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	f200 80bd 	bhi.w	8001f90 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d002      	beq.n	8001e20 <HAL_RCC_GetSysClockFreq+0x34>
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d003      	beq.n	8001e26 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e1e:	e0b7      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e20:	4b61      	ldr	r3, [pc, #388]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001e22:	60bb      	str	r3, [r7, #8]
      break;
 8001e24:	e0b7      	b.n	8001f96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e26:	4b61      	ldr	r3, [pc, #388]	; (8001fac <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001e28:	60bb      	str	r3, [r7, #8]
      break;
 8001e2a:	e0b4      	b.n	8001f96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e2c:	4b5d      	ldr	r3, [pc, #372]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e34:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001e36:	4b5b      	ldr	r3, [pc, #364]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d04d      	beq.n	8001ede <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e42:	4b58      	ldr	r3, [pc, #352]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	099b      	lsrs	r3, r3, #6
 8001e48:	461a      	mov	r2, r3
 8001e4a:	f04f 0300 	mov.w	r3, #0
 8001e4e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e52:	f04f 0100 	mov.w	r1, #0
 8001e56:	ea02 0800 	and.w	r8, r2, r0
 8001e5a:	ea03 0901 	and.w	r9, r3, r1
 8001e5e:	4640      	mov	r0, r8
 8001e60:	4649      	mov	r1, r9
 8001e62:	f04f 0200 	mov.w	r2, #0
 8001e66:	f04f 0300 	mov.w	r3, #0
 8001e6a:	014b      	lsls	r3, r1, #5
 8001e6c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e70:	0142      	lsls	r2, r0, #5
 8001e72:	4610      	mov	r0, r2
 8001e74:	4619      	mov	r1, r3
 8001e76:	ebb0 0008 	subs.w	r0, r0, r8
 8001e7a:	eb61 0109 	sbc.w	r1, r1, r9
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	f04f 0300 	mov.w	r3, #0
 8001e86:	018b      	lsls	r3, r1, #6
 8001e88:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e8c:	0182      	lsls	r2, r0, #6
 8001e8e:	1a12      	subs	r2, r2, r0
 8001e90:	eb63 0301 	sbc.w	r3, r3, r1
 8001e94:	f04f 0000 	mov.w	r0, #0
 8001e98:	f04f 0100 	mov.w	r1, #0
 8001e9c:	00d9      	lsls	r1, r3, #3
 8001e9e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ea2:	00d0      	lsls	r0, r2, #3
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	eb12 0208 	adds.w	r2, r2, r8
 8001eac:	eb43 0309 	adc.w	r3, r3, r9
 8001eb0:	f04f 0000 	mov.w	r0, #0
 8001eb4:	f04f 0100 	mov.w	r1, #0
 8001eb8:	0259      	lsls	r1, r3, #9
 8001eba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001ebe:	0250      	lsls	r0, r2, #9
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	f04f 0300 	mov.w	r3, #0
 8001ed0:	f7fe f9f6 	bl	80002c0 <__aeabi_uldivmod>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4613      	mov	r3, r2
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	e04a      	b.n	8001f74 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ede:	4b31      	ldr	r3, [pc, #196]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	099b      	lsrs	r3, r3, #6
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	f04f 0300 	mov.w	r3, #0
 8001eea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001eee:	f04f 0100 	mov.w	r1, #0
 8001ef2:	ea02 0400 	and.w	r4, r2, r0
 8001ef6:	ea03 0501 	and.w	r5, r3, r1
 8001efa:	4620      	mov	r0, r4
 8001efc:	4629      	mov	r1, r5
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	f04f 0300 	mov.w	r3, #0
 8001f06:	014b      	lsls	r3, r1, #5
 8001f08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f0c:	0142      	lsls	r2, r0, #5
 8001f0e:	4610      	mov	r0, r2
 8001f10:	4619      	mov	r1, r3
 8001f12:	1b00      	subs	r0, r0, r4
 8001f14:	eb61 0105 	sbc.w	r1, r1, r5
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	f04f 0300 	mov.w	r3, #0
 8001f20:	018b      	lsls	r3, r1, #6
 8001f22:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f26:	0182      	lsls	r2, r0, #6
 8001f28:	1a12      	subs	r2, r2, r0
 8001f2a:	eb63 0301 	sbc.w	r3, r3, r1
 8001f2e:	f04f 0000 	mov.w	r0, #0
 8001f32:	f04f 0100 	mov.w	r1, #0
 8001f36:	00d9      	lsls	r1, r3, #3
 8001f38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f3c:	00d0      	lsls	r0, r2, #3
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	1912      	adds	r2, r2, r4
 8001f44:	eb45 0303 	adc.w	r3, r5, r3
 8001f48:	f04f 0000 	mov.w	r0, #0
 8001f4c:	f04f 0100 	mov.w	r1, #0
 8001f50:	0299      	lsls	r1, r3, #10
 8001f52:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001f56:	0290      	lsls	r0, r2, #10
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	4619      	mov	r1, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	461a      	mov	r2, r3
 8001f64:	f04f 0300 	mov.w	r3, #0
 8001f68:	f7fe f9aa 	bl	80002c0 <__aeabi_uldivmod>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	4613      	mov	r3, r2
 8001f72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001f74:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	0c1b      	lsrs	r3, r3, #16
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	3301      	adds	r3, #1
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8c:	60bb      	str	r3, [r7, #8]
      break;
 8001f8e:	e002      	b.n	8001f96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f90:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001f92:	60bb      	str	r3, [r7, #8]
      break;
 8001f94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f96:	68bb      	ldr	r3, [r7, #8]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	00f42400 	.word	0x00f42400
 8001fac:	007a1200 	.word	0x007a1200

08001fb0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fb4:	4b03      	ldr	r3, [pc, #12]	; (8001fc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20000000 	.word	0x20000000

08001fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fcc:	f7ff fff0 	bl	8001fb0 <HAL_RCC_GetHCLKFreq>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	0a9b      	lsrs	r3, r3, #10
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	4903      	ldr	r1, [pc, #12]	; (8001fec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fde:	5ccb      	ldrb	r3, [r1, r3]
 8001fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	08004760 	.word	0x08004760

08001ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ff4:	f7ff ffdc 	bl	8001fb0 <HAL_RCC_GetHCLKFreq>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	4b05      	ldr	r3, [pc, #20]	; (8002010 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	0b5b      	lsrs	r3, r3, #13
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	4903      	ldr	r1, [pc, #12]	; (8002014 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002006:	5ccb      	ldrb	r3, [r1, r3]
 8002008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800200c:	4618      	mov	r0, r3
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40023800 	.word	0x40023800
 8002014:	08004760 	.word	0x08004760

08002018 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b088      	sub	sp, #32
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002030:	2300      	movs	r3, #0
 8002032:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b00      	cmp	r3, #0
 800203e:	d012      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002040:	4b69      	ldr	r3, [pc, #420]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	4a68      	ldr	r2, [pc, #416]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002046:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800204a:	6093      	str	r3, [r2, #8]
 800204c:	4b66      	ldr	r3, [pc, #408]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002054:	4964      	ldr	r1, [pc, #400]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002056:	4313      	orrs	r3, r2
 8002058:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002062:	2301      	movs	r3, #1
 8002064:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d017      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002072:	4b5d      	ldr	r3, [pc, #372]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002074:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002078:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002080:	4959      	ldr	r1, [pc, #356]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002082:	4313      	orrs	r3, r2
 8002084:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800208c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002090:	d101      	bne.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002092:	2301      	movs	r3, #1
 8002094:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800209e:	2301      	movs	r3, #1
 80020a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d017      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020ae:	4b4e      	ldr	r3, [pc, #312]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020bc:	494a      	ldr	r1, [pc, #296]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020cc:	d101      	bne.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80020ce:	2301      	movs	r3, #1
 80020d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80020da:	2301      	movs	r3, #1
 80020dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80020ea:	2301      	movs	r3, #1
 80020ec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0320 	and.w	r3, r3, #32
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 808b 	beq.w	8002212 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80020fc:	4b3a      	ldr	r3, [pc, #232]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	4a39      	ldr	r2, [pc, #228]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002106:	6413      	str	r3, [r2, #64]	; 0x40
 8002108:	4b37      	ldr	r3, [pc, #220]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002114:	4b35      	ldr	r3, [pc, #212]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a34      	ldr	r2, [pc, #208]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800211a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800211e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002120:	f7fe ff2a 	bl	8000f78 <HAL_GetTick>
 8002124:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002126:	e008      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002128:	f7fe ff26 	bl	8000f78 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b64      	cmp	r3, #100	; 0x64
 8002134:	d901      	bls.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e357      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800213a:	4b2c      	ldr	r3, [pc, #176]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0f0      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002146:	4b28      	ldr	r3, [pc, #160]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800214e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d035      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	429a      	cmp	r2, r3
 8002162:	d02e      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002164:	4b20      	ldr	r3, [pc, #128]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800216c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800216e:	4b1e      	ldr	r3, [pc, #120]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002172:	4a1d      	ldr	r2, [pc, #116]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002178:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800217a:	4b1b      	ldr	r3, [pc, #108]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800217c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217e:	4a1a      	ldr	r2, [pc, #104]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002184:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002186:	4a18      	ldr	r2, [pc, #96]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800218c:	4b16      	ldr	r3, [pc, #88]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800218e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b01      	cmp	r3, #1
 8002196:	d114      	bne.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002198:	f7fe feee 	bl	8000f78 <HAL_GetTick>
 800219c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219e:	e00a      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021a0:	f7fe feea 	bl	8000f78 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e319      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b6:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0ee      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80021ce:	d111      	bne.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80021d0:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021dc:	4b04      	ldr	r3, [pc, #16]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80021de:	400b      	ands	r3, r1
 80021e0:	4901      	ldr	r1, [pc, #4]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	608b      	str	r3, [r1, #8]
 80021e6:	e00b      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40007000 	.word	0x40007000
 80021f0:	0ffffcff 	.word	0x0ffffcff
 80021f4:	4bb1      	ldr	r3, [pc, #708]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	4ab0      	ldr	r2, [pc, #704]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021fa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80021fe:	6093      	str	r3, [r2, #8]
 8002200:	4bae      	ldr	r3, [pc, #696]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002202:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800220c:	49ab      	ldr	r1, [pc, #684]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800220e:	4313      	orrs	r3, r2
 8002210:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0310 	and.w	r3, r3, #16
 800221a:	2b00      	cmp	r3, #0
 800221c:	d010      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800221e:	4ba7      	ldr	r3, [pc, #668]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002220:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002224:	4aa5      	ldr	r2, [pc, #660]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002226:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800222a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800222e:	4ba3      	ldr	r3, [pc, #652]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002230:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002238:	49a0      	ldr	r1, [pc, #640]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800223a:	4313      	orrs	r3, r2
 800223c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00a      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800224c:	4b9b      	ldr	r3, [pc, #620]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800224e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002252:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800225a:	4998      	ldr	r1, [pc, #608]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800225c:	4313      	orrs	r3, r2
 800225e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00a      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800226e:	4b93      	ldr	r3, [pc, #588]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002274:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800227c:	498f      	ldr	r1, [pc, #572]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800227e:	4313      	orrs	r3, r2
 8002280:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00a      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002290:	4b8a      	ldr	r3, [pc, #552]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002296:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800229e:	4987      	ldr	r1, [pc, #540]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00a      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80022b2:	4b82      	ldr	r3, [pc, #520]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c0:	497e      	ldr	r1, [pc, #504]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00a      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022d4:	4b79      	ldr	r3, [pc, #484]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022da:	f023 0203 	bic.w	r2, r3, #3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	4976      	ldr	r1, [pc, #472]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00a      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022f6:	4b71      	ldr	r3, [pc, #452]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fc:	f023 020c 	bic.w	r2, r3, #12
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002304:	496d      	ldr	r1, [pc, #436]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002306:	4313      	orrs	r3, r2
 8002308:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00a      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002318:	4b68      	ldr	r3, [pc, #416]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800231a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002326:	4965      	ldr	r1, [pc, #404]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00a      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800233a:	4b60      	ldr	r3, [pc, #384]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800233c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002340:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002348:	495c      	ldr	r1, [pc, #368]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800234a:	4313      	orrs	r3, r2
 800234c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00a      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800235c:	4b57      	ldr	r3, [pc, #348]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800235e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002362:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236a:	4954      	ldr	r1, [pc, #336]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800236c:	4313      	orrs	r3, r2
 800236e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00a      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800237e:	4b4f      	ldr	r3, [pc, #316]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002384:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238c:	494b      	ldr	r1, [pc, #300]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800238e:	4313      	orrs	r3, r2
 8002390:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00a      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80023a0:	4b46      	ldr	r3, [pc, #280]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ae:	4943      	ldr	r1, [pc, #268]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00a      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80023c2:	4b3e      	ldr	r3, [pc, #248]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d0:	493a      	ldr	r1, [pc, #232]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00a      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80023e4:	4b35      	ldr	r3, [pc, #212]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023f2:	4932      	ldr	r1, [pc, #200]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d011      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002406:	4b2d      	ldr	r3, [pc, #180]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002414:	4929      	ldr	r1, [pc, #164]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002416:	4313      	orrs	r3, r2
 8002418:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002420:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002424:	d101      	bne.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002426:	2301      	movs	r3, #1
 8002428:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002436:	2301      	movs	r3, #1
 8002438:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00a      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002446:	4b1d      	ldr	r3, [pc, #116]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002454:	4919      	ldr	r1, [pc, #100]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002456:	4313      	orrs	r3, r2
 8002458:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00b      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002468:	4b14      	ldr	r3, [pc, #80]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800246a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800246e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002478:	4910      	ldr	r1, [pc, #64]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800247a:	4313      	orrs	r3, r2
 800247c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d006      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 80d9 	beq.w	8002646 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002494:	4b09      	ldr	r3, [pc, #36]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a08      	ldr	r2, [pc, #32]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800249a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800249e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024a0:	f7fe fd6a 	bl	8000f78 <HAL_GetTick>
 80024a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024a6:	e00b      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80024a8:	f7fe fd66 	bl	8000f78 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b64      	cmp	r3, #100	; 0x64
 80024b4:	d904      	bls.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e197      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80024ba:	bf00      	nop
 80024bc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024c0:	4b6c      	ldr	r3, [pc, #432]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1ed      	bne.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d021      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d11d      	bne.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80024e0:	4b64      	ldr	r3, [pc, #400]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024e6:	0c1b      	lsrs	r3, r3, #16
 80024e8:	f003 0303 	and.w	r3, r3, #3
 80024ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80024ee:	4b61      	ldr	r3, [pc, #388]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024f4:	0e1b      	lsrs	r3, r3, #24
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	019a      	lsls	r2, r3, #6
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	041b      	lsls	r3, r3, #16
 8002506:	431a      	orrs	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	061b      	lsls	r3, r3, #24
 800250c:	431a      	orrs	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	071b      	lsls	r3, r3, #28
 8002514:	4957      	ldr	r1, [pc, #348]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002516:	4313      	orrs	r3, r2
 8002518:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d004      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800252c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002530:	d00a      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800253a:	2b00      	cmp	r3, #0
 800253c:	d02e      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002546:	d129      	bne.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002548:	4b4a      	ldr	r3, [pc, #296]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800254a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800254e:	0c1b      	lsrs	r3, r3, #16
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002556:	4b47      	ldr	r3, [pc, #284]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800255c:	0f1b      	lsrs	r3, r3, #28
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	019a      	lsls	r2, r3, #6
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	041b      	lsls	r3, r3, #16
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	061b      	lsls	r3, r3, #24
 8002576:	431a      	orrs	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	071b      	lsls	r3, r3, #28
 800257c:	493d      	ldr	r1, [pc, #244]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800257e:	4313      	orrs	r3, r2
 8002580:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002584:	4b3b      	ldr	r3, [pc, #236]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002586:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800258a:	f023 021f 	bic.w	r2, r3, #31
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	3b01      	subs	r3, #1
 8002594:	4937      	ldr	r1, [pc, #220]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002596:	4313      	orrs	r3, r2
 8002598:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d01d      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80025a8:	4b32      	ldr	r3, [pc, #200]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ae:	0e1b      	lsrs	r3, r3, #24
 80025b0:	f003 030f 	and.w	r3, r3, #15
 80025b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80025b6:	4b2f      	ldr	r3, [pc, #188]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025bc:	0f1b      	lsrs	r3, r3, #28
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	019a      	lsls	r2, r3, #6
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	041b      	lsls	r3, r3, #16
 80025d0:	431a      	orrs	r2, r3
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	061b      	lsls	r3, r3, #24
 80025d6:	431a      	orrs	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	071b      	lsls	r3, r3, #28
 80025dc:	4925      	ldr	r1, [pc, #148]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d011      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	019a      	lsls	r2, r3, #6
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	041b      	lsls	r3, r3, #16
 80025fc:	431a      	orrs	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	061b      	lsls	r3, r3, #24
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	071b      	lsls	r3, r3, #28
 800260c:	4919      	ldr	r1, [pc, #100]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800260e:	4313      	orrs	r3, r2
 8002610:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002614:	4b17      	ldr	r3, [pc, #92]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a16      	ldr	r2, [pc, #88]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800261a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800261e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002620:	f7fe fcaa 	bl	8000f78 <HAL_GetTick>
 8002624:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002626:	e008      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002628:	f7fe fca6 	bl	8000f78 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b64      	cmp	r3, #100	; 0x64
 8002634:	d901      	bls.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e0d7      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800263a:	4b0e      	ldr	r3, [pc, #56]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0f0      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	2b01      	cmp	r3, #1
 800264a:	f040 80cd 	bne.w	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800264e:	4b09      	ldr	r3, [pc, #36]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a08      	ldr	r2, [pc, #32]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002658:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800265a:	f7fe fc8d 	bl	8000f78 <HAL_GetTick>
 800265e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002660:	e00a      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002662:	f7fe fc89 	bl	8000f78 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b64      	cmp	r3, #100	; 0x64
 800266e:	d903      	bls.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e0ba      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002674:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002678:	4b5e      	ldr	r3, [pc, #376]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002680:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002684:	d0ed      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002696:	2b00      	cmp	r3, #0
 8002698:	d009      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d02e      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d12a      	bne.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80026ae:	4b51      	ldr	r3, [pc, #324]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b4:	0c1b      	lsrs	r3, r3, #16
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80026bc:	4b4d      	ldr	r3, [pc, #308]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c2:	0f1b      	lsrs	r3, r3, #28
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	019a      	lsls	r2, r3, #6
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	041b      	lsls	r3, r3, #16
 80026d4:	431a      	orrs	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	061b      	lsls	r3, r3, #24
 80026dc:	431a      	orrs	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	071b      	lsls	r3, r3, #28
 80026e2:	4944      	ldr	r1, [pc, #272]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80026ea:	4b42      	ldr	r3, [pc, #264]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f8:	3b01      	subs	r3, #1
 80026fa:	021b      	lsls	r3, r3, #8
 80026fc:	493d      	ldr	r1, [pc, #244]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d022      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002714:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002718:	d11d      	bne.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800271a:	4b36      	ldr	r3, [pc, #216]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800271c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002720:	0e1b      	lsrs	r3, r3, #24
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002728:	4b32      	ldr	r3, [pc, #200]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800272a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272e:	0f1b      	lsrs	r3, r3, #28
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	019a      	lsls	r2, r3, #6
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	041b      	lsls	r3, r3, #16
 8002742:	431a      	orrs	r2, r3
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	061b      	lsls	r3, r3, #24
 8002748:	431a      	orrs	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	071b      	lsls	r3, r3, #28
 800274e:	4929      	ldr	r1, [pc, #164]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002750:	4313      	orrs	r3, r2
 8002752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d028      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002762:	4b24      	ldr	r3, [pc, #144]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002768:	0e1b      	lsrs	r3, r3, #24
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002770:	4b20      	ldr	r3, [pc, #128]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002776:	0c1b      	lsrs	r3, r3, #16
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	019a      	lsls	r2, r3, #6
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	041b      	lsls	r3, r3, #16
 8002788:	431a      	orrs	r2, r3
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	061b      	lsls	r3, r3, #24
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	071b      	lsls	r3, r3, #28
 8002796:	4917      	ldr	r1, [pc, #92]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002798:	4313      	orrs	r3, r2
 800279a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800279e:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ac:	4911      	ldr	r1, [pc, #68]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80027b4:	4b0f      	ldr	r3, [pc, #60]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a0e      	ldr	r2, [pc, #56]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027c0:	f7fe fbda 	bl	8000f78 <HAL_GetTick>
 80027c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80027c8:	f7fe fbd6 	bl	8000f78 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b64      	cmp	r3, #100	; 0x64
 80027d4:	d901      	bls.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e007      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80027da:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027e6:	d1ef      	bne.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3720      	adds	r7, #32
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40023800 	.word	0x40023800

080027f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e040      	b.n	800288c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800280e:	2b00      	cmp	r3, #0
 8002810:	d106      	bne.n	8002820 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7fe fab6 	bl	8000d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2224      	movs	r2, #36	; 0x24
 8002824:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0201 	bic.w	r2, r2, #1
 8002834:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 fb9c 	bl	8002f74 <UART_SetConfig>
 800283c:	4603      	mov	r3, r0
 800283e:	2b01      	cmp	r3, #1
 8002840:	d101      	bne.n	8002846 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e022      	b.n	800288c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284a:	2b00      	cmp	r3, #0
 800284c:	d002      	beq.n	8002854 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 fdf2 	bl	8003438 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002862:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002872:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0201 	orr.w	r2, r2, #1
 8002882:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 fe79 	bl	800357c <UART_CheckIdleState>
 800288a:	4603      	mov	r3, r0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08a      	sub	sp, #40	; 0x28
 8002898:	af02      	add	r7, sp, #8
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	4613      	mov	r3, r2
 80028a2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028a8:	2b20      	cmp	r3, #32
 80028aa:	f040 8081 	bne.w	80029b0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d002      	beq.n	80028ba <HAL_UART_Transmit+0x26>
 80028b4:	88fb      	ldrh	r3, [r7, #6]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e079      	b.n	80029b2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d101      	bne.n	80028cc <HAL_UART_Transmit+0x38>
 80028c8:	2302      	movs	r3, #2
 80028ca:	e072      	b.n	80029b2 <HAL_UART_Transmit+0x11e>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2221      	movs	r2, #33	; 0x21
 80028e0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028e2:	f7fe fb49 	bl	8000f78 <HAL_GetTick>
 80028e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	88fa      	ldrh	r2, [r7, #6]
 80028ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	88fa      	ldrh	r2, [r7, #6]
 80028f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002900:	d108      	bne.n	8002914 <HAL_UART_Transmit+0x80>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d104      	bne.n	8002914 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800290a:	2300      	movs	r3, #0
 800290c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	61bb      	str	r3, [r7, #24]
 8002912:	e003      	b.n	800291c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002918:	2300      	movs	r3, #0
 800291a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002924:	e02c      	b.n	8002980 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2200      	movs	r2, #0
 800292e:	2180      	movs	r1, #128	; 0x80
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 fe56 	bl	80035e2 <UART_WaitOnFlagUntilTimeout>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e038      	b.n	80029b2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10b      	bne.n	800295e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	881b      	ldrh	r3, [r3, #0]
 800294a:	461a      	mov	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002954:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	3302      	adds	r3, #2
 800295a:	61bb      	str	r3, [r7, #24]
 800295c:	e007      	b.n	800296e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	781a      	ldrb	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	3301      	adds	r3, #1
 800296c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002974:	b29b      	uxth	r3, r3
 8002976:	3b01      	subs	r3, #1
 8002978:	b29a      	uxth	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002986:	b29b      	uxth	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1cc      	bne.n	8002926 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	2200      	movs	r2, #0
 8002994:	2140      	movs	r1, #64	; 0x40
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 fe23 	bl	80035e2 <UART_WaitOnFlagUntilTimeout>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e005      	b.n	80029b2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2220      	movs	r2, #32
 80029aa:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	e000      	b.n	80029b2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80029b0:	2302      	movs	r3, #2
  }
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3720      	adds	r7, #32
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b08a      	sub	sp, #40	; 0x28
 80029be:	af02      	add	r7, sp, #8
 80029c0:	60f8      	str	r0, [r7, #12]
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	603b      	str	r3, [r7, #0]
 80029c6:	4613      	mov	r3, r2
 80029c8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029ce:	2b20      	cmp	r3, #32
 80029d0:	f040 80be 	bne.w	8002b50 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <HAL_UART_Receive+0x26>
 80029da:	88fb      	ldrh	r3, [r7, #6]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e0b6      	b.n	8002b52 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d101      	bne.n	80029f2 <HAL_UART_Receive+0x38>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e0af      	b.n	8002b52 <HAL_UART_Receive+0x198>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2222      	movs	r2, #34	; 0x22
 8002a06:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a0e:	f7fe fab3 	bl	8000f78 <HAL_GetTick>
 8002a12:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	88fa      	ldrh	r2, [r7, #6]
 8002a18:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	88fa      	ldrh	r2, [r7, #6]
 8002a20:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a2c:	d10e      	bne.n	8002a4c <HAL_UART_Receive+0x92>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d105      	bne.n	8002a42 <HAL_UART_Receive+0x88>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002a3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a40:	e02d      	b.n	8002a9e <HAL_UART_Receive+0xe4>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	22ff      	movs	r2, #255	; 0xff
 8002a46:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a4a:	e028      	b.n	8002a9e <HAL_UART_Receive+0xe4>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10d      	bne.n	8002a70 <HAL_UART_Receive+0xb6>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d104      	bne.n	8002a66 <HAL_UART_Receive+0xac>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	22ff      	movs	r2, #255	; 0xff
 8002a60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a64:	e01b      	b.n	8002a9e <HAL_UART_Receive+0xe4>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	227f      	movs	r2, #127	; 0x7f
 8002a6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a6e:	e016      	b.n	8002a9e <HAL_UART_Receive+0xe4>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a78:	d10d      	bne.n	8002a96 <HAL_UART_Receive+0xdc>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d104      	bne.n	8002a8c <HAL_UART_Receive+0xd2>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	227f      	movs	r2, #127	; 0x7f
 8002a86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a8a:	e008      	b.n	8002a9e <HAL_UART_Receive+0xe4>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	223f      	movs	r2, #63	; 0x3f
 8002a90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a94:	e003      	b.n	8002a9e <HAL_UART_Receive+0xe4>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002aa4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aae:	d108      	bne.n	8002ac2 <HAL_UART_Receive+0x108>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d104      	bne.n	8002ac2 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	61bb      	str	r3, [r7, #24]
 8002ac0:	e003      	b.n	8002aca <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002ad2:	e032      	b.n	8002b3a <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	2200      	movs	r2, #0
 8002adc:	2120      	movs	r1, #32
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 fd7f 	bl	80035e2 <UART_WaitOnFlagUntilTimeout>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e031      	b.n	8002b52 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10c      	bne.n	8002b0e <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	8a7b      	ldrh	r3, [r7, #18]
 8002afe:	4013      	ands	r3, r2
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	3302      	adds	r3, #2
 8002b0a:	61bb      	str	r3, [r7, #24]
 8002b0c:	e00c      	b.n	8002b28 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	8a7b      	ldrh	r3, [r7, #18]
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	3301      	adds	r3, #1
 8002b26:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	3b01      	subs	r3, #1
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1c6      	bne.n	8002ad4 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2220      	movs	r2, #32
 8002b4a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	e000      	b.n	8002b52 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8002b50:	2302      	movs	r3, #2
  }
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3720      	adds	r7, #32
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
	...

08002b5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b088      	sub	sp, #32
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002b7c:	69fa      	ldr	r2, [r7, #28]
 8002b7e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002b82:	4013      	ands	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d113      	bne.n	8002bb4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f003 0320 	and.w	r3, r3, #32
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00e      	beq.n	8002bb4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	f003 0320 	and.w	r3, r3, #32
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d009      	beq.n	8002bb4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 81b9 	beq.w	8002f1c <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	4798      	blx	r3
      }
      return;
 8002bb2:	e1b3      	b.n	8002f1c <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 80e3 	beq.w	8002d82 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d105      	bne.n	8002bd2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4ba5      	ldr	r3, [pc, #660]	; (8002e60 <HAL_UART_IRQHandler+0x304>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 80d8 	beq.w	8002d82 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d010      	beq.n	8002bfe <HAL_UART_IRQHandler+0xa2>
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00b      	beq.n	8002bfe <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2201      	movs	r2, #1
 8002bec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bf4:	f043 0201 	orr.w	r2, r3, #1
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d010      	beq.n	8002c2a <HAL_UART_IRQHandler+0xce>
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00b      	beq.n	8002c2a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2202      	movs	r2, #2
 8002c18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c20:	f043 0204 	orr.w	r2, r3, #4
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d010      	beq.n	8002c56 <HAL_UART_IRQHandler+0xfa>
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00b      	beq.n	8002c56 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2204      	movs	r2, #4
 8002c44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c4c:	f043 0202 	orr.w	r2, r3, #2
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d015      	beq.n	8002c8c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	f003 0320 	and.w	r3, r3, #32
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d104      	bne.n	8002c74 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00b      	beq.n	8002c8c <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2208      	movs	r2, #8
 8002c7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c82:	f043 0208 	orr.w	r2, r3, #8
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d011      	beq.n	8002cba <HAL_UART_IRQHandler+0x15e>
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00c      	beq.n	8002cba <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ca8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cb0:	f043 0220 	orr.w	r2, r3, #32
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 812d 	beq.w	8002f20 <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	f003 0320 	and.w	r3, r3, #32
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00c      	beq.n	8002cea <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	f003 0320 	and.w	r3, r3, #32
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d007      	beq.n	8002cea <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cf0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfc:	2b40      	cmp	r3, #64	; 0x40
 8002cfe:	d004      	beq.n	8002d0a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d031      	beq.n	8002d6e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 fce5 	bl	80036da <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1a:	2b40      	cmp	r3, #64	; 0x40
 8002d1c:	d123      	bne.n	8002d66 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d2c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d013      	beq.n	8002d5e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3a:	4a4a      	ldr	r2, [pc, #296]	; (8002e64 <HAL_UART_IRQHandler+0x308>)
 8002d3c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fe faa5 	bl	8001292 <HAL_DMA_Abort_IT>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d017      	beq.n	8002d7e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002d58:	4610      	mov	r0, r2
 8002d5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d5c:	e00f      	b.n	8002d7e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f8f2 	bl	8002f48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d64:	e00b      	b.n	8002d7e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f8ee 	bl	8002f48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d6c:	e007      	b.n	8002d7e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f8ea 	bl	8002f48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002d7c:	e0d0      	b.n	8002f20 <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d7e:	bf00      	nop
    return;
 8002d80:	e0ce      	b.n	8002f20 <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	f040 80a7 	bne.w	8002eda <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f003 0310 	and.w	r3, r3, #16
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 80a1 	beq.w	8002eda <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	f003 0310 	and.w	r3, r3, #16
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 809b 	beq.w	8002eda <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2210      	movs	r2, #16
 8002daa:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db6:	2b40      	cmp	r3, #64	; 0x40
 8002db8:	d156      	bne.n	8002e68 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002dc4:	893b      	ldrh	r3, [r7, #8]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 80ac 	beq.w	8002f24 <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002dd2:	893a      	ldrh	r2, [r7, #8]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	f080 80a5 	bcs.w	8002f24 <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	893a      	ldrh	r2, [r7, #8]
 8002dde:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de6:	69db      	ldr	r3, [r3, #28]
 8002de8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dec:	d02a      	beq.n	8002e44 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dfc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0201 	bic.w	r2, r2, #1
 8002e0c:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e1c:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2220      	movs	r2, #32
 8002e22:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0210 	bic.w	r2, r2, #16
 8002e38:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fe f9b7 	bl	80011b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	4619      	mov	r1, r3
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 f87f 	bl	8002f5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e5e:	e061      	b.n	8002f24 <HAL_UART_IRQHandler+0x3c8>
 8002e60:	04000120 	.word	0x04000120
 8002e64:	08003739 	.word	0x08003739
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d050      	beq.n	8002f28 <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 8002e86:	897b      	ldrh	r3, [r7, #10]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d04d      	beq.n	8002f28 <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e9a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689a      	ldr	r2, [r3, #8]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0201 	bic.w	r2, r2, #1
 8002eaa:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 0210 	bic.w	r2, r2, #16
 8002ecc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ece:	897b      	ldrh	r3, [r7, #10]
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f842 	bl	8002f5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ed8:	e026      	b.n	8002f28 <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00d      	beq.n	8002f00 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d008      	beq.n	8002f00 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d01a      	beq.n	8002f2c <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	4798      	blx	r3
    }
    return;
 8002efe:	e015      	b.n	8002f2c <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d011      	beq.n	8002f2e <HAL_UART_IRQHandler+0x3d2>
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00c      	beq.n	8002f2e <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 fc25 	bl	8003764 <UART_EndTransmit_IT>
    return;
 8002f1a:	e008      	b.n	8002f2e <HAL_UART_IRQHandler+0x3d2>
      return;
 8002f1c:	bf00      	nop
 8002f1e:	e006      	b.n	8002f2e <HAL_UART_IRQHandler+0x3d2>
    return;
 8002f20:	bf00      	nop
 8002f22:	e004      	b.n	8002f2e <HAL_UART_IRQHandler+0x3d2>
      return;
 8002f24:	bf00      	nop
 8002f26:	e002      	b.n	8002f2e <HAL_UART_IRQHandler+0x3d2>
      return;
 8002f28:	bf00      	nop
 8002f2a:	e000      	b.n	8002f2e <HAL_UART_IRQHandler+0x3d2>
    return;
 8002f2c:	bf00      	nop
  }

}
 8002f2e:	3720      	adds	r7, #32
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b088      	sub	sp, #32
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	4ba7      	ldr	r3, [pc, #668]	; (800323c <UART_SetConfig+0x2c8>)
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6812      	ldr	r2, [r2, #0]
 8002fa6:	6979      	ldr	r1, [r7, #20]
 8002fa8:	430b      	orrs	r3, r1
 8002faa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a95      	ldr	r2, [pc, #596]	; (8003240 <UART_SetConfig+0x2cc>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d120      	bne.n	8003032 <UART_SetConfig+0xbe>
 8002ff0:	4b94      	ldr	r3, [pc, #592]	; (8003244 <UART_SetConfig+0x2d0>)
 8002ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d816      	bhi.n	800302c <UART_SetConfig+0xb8>
 8002ffe:	a201      	add	r2, pc, #4	; (adr r2, 8003004 <UART_SetConfig+0x90>)
 8003000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003004:	08003015 	.word	0x08003015
 8003008:	08003021 	.word	0x08003021
 800300c:	0800301b 	.word	0x0800301b
 8003010:	08003027 	.word	0x08003027
 8003014:	2301      	movs	r3, #1
 8003016:	77fb      	strb	r3, [r7, #31]
 8003018:	e14f      	b.n	80032ba <UART_SetConfig+0x346>
 800301a:	2302      	movs	r3, #2
 800301c:	77fb      	strb	r3, [r7, #31]
 800301e:	e14c      	b.n	80032ba <UART_SetConfig+0x346>
 8003020:	2304      	movs	r3, #4
 8003022:	77fb      	strb	r3, [r7, #31]
 8003024:	e149      	b.n	80032ba <UART_SetConfig+0x346>
 8003026:	2308      	movs	r3, #8
 8003028:	77fb      	strb	r3, [r7, #31]
 800302a:	e146      	b.n	80032ba <UART_SetConfig+0x346>
 800302c:	2310      	movs	r3, #16
 800302e:	77fb      	strb	r3, [r7, #31]
 8003030:	e143      	b.n	80032ba <UART_SetConfig+0x346>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a84      	ldr	r2, [pc, #528]	; (8003248 <UART_SetConfig+0x2d4>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d132      	bne.n	80030a2 <UART_SetConfig+0x12e>
 800303c:	4b81      	ldr	r3, [pc, #516]	; (8003244 <UART_SetConfig+0x2d0>)
 800303e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003042:	f003 030c 	and.w	r3, r3, #12
 8003046:	2b0c      	cmp	r3, #12
 8003048:	d828      	bhi.n	800309c <UART_SetConfig+0x128>
 800304a:	a201      	add	r2, pc, #4	; (adr r2, 8003050 <UART_SetConfig+0xdc>)
 800304c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003050:	08003085 	.word	0x08003085
 8003054:	0800309d 	.word	0x0800309d
 8003058:	0800309d 	.word	0x0800309d
 800305c:	0800309d 	.word	0x0800309d
 8003060:	08003091 	.word	0x08003091
 8003064:	0800309d 	.word	0x0800309d
 8003068:	0800309d 	.word	0x0800309d
 800306c:	0800309d 	.word	0x0800309d
 8003070:	0800308b 	.word	0x0800308b
 8003074:	0800309d 	.word	0x0800309d
 8003078:	0800309d 	.word	0x0800309d
 800307c:	0800309d 	.word	0x0800309d
 8003080:	08003097 	.word	0x08003097
 8003084:	2300      	movs	r3, #0
 8003086:	77fb      	strb	r3, [r7, #31]
 8003088:	e117      	b.n	80032ba <UART_SetConfig+0x346>
 800308a:	2302      	movs	r3, #2
 800308c:	77fb      	strb	r3, [r7, #31]
 800308e:	e114      	b.n	80032ba <UART_SetConfig+0x346>
 8003090:	2304      	movs	r3, #4
 8003092:	77fb      	strb	r3, [r7, #31]
 8003094:	e111      	b.n	80032ba <UART_SetConfig+0x346>
 8003096:	2308      	movs	r3, #8
 8003098:	77fb      	strb	r3, [r7, #31]
 800309a:	e10e      	b.n	80032ba <UART_SetConfig+0x346>
 800309c:	2310      	movs	r3, #16
 800309e:	77fb      	strb	r3, [r7, #31]
 80030a0:	e10b      	b.n	80032ba <UART_SetConfig+0x346>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a69      	ldr	r2, [pc, #420]	; (800324c <UART_SetConfig+0x2d8>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d120      	bne.n	80030ee <UART_SetConfig+0x17a>
 80030ac:	4b65      	ldr	r3, [pc, #404]	; (8003244 <UART_SetConfig+0x2d0>)
 80030ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80030b6:	2b30      	cmp	r3, #48	; 0x30
 80030b8:	d013      	beq.n	80030e2 <UART_SetConfig+0x16e>
 80030ba:	2b30      	cmp	r3, #48	; 0x30
 80030bc:	d814      	bhi.n	80030e8 <UART_SetConfig+0x174>
 80030be:	2b20      	cmp	r3, #32
 80030c0:	d009      	beq.n	80030d6 <UART_SetConfig+0x162>
 80030c2:	2b20      	cmp	r3, #32
 80030c4:	d810      	bhi.n	80030e8 <UART_SetConfig+0x174>
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <UART_SetConfig+0x15c>
 80030ca:	2b10      	cmp	r3, #16
 80030cc:	d006      	beq.n	80030dc <UART_SetConfig+0x168>
 80030ce:	e00b      	b.n	80030e8 <UART_SetConfig+0x174>
 80030d0:	2300      	movs	r3, #0
 80030d2:	77fb      	strb	r3, [r7, #31]
 80030d4:	e0f1      	b.n	80032ba <UART_SetConfig+0x346>
 80030d6:	2302      	movs	r3, #2
 80030d8:	77fb      	strb	r3, [r7, #31]
 80030da:	e0ee      	b.n	80032ba <UART_SetConfig+0x346>
 80030dc:	2304      	movs	r3, #4
 80030de:	77fb      	strb	r3, [r7, #31]
 80030e0:	e0eb      	b.n	80032ba <UART_SetConfig+0x346>
 80030e2:	2308      	movs	r3, #8
 80030e4:	77fb      	strb	r3, [r7, #31]
 80030e6:	e0e8      	b.n	80032ba <UART_SetConfig+0x346>
 80030e8:	2310      	movs	r3, #16
 80030ea:	77fb      	strb	r3, [r7, #31]
 80030ec:	e0e5      	b.n	80032ba <UART_SetConfig+0x346>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a57      	ldr	r2, [pc, #348]	; (8003250 <UART_SetConfig+0x2dc>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d120      	bne.n	800313a <UART_SetConfig+0x1c6>
 80030f8:	4b52      	ldr	r3, [pc, #328]	; (8003244 <UART_SetConfig+0x2d0>)
 80030fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003102:	2bc0      	cmp	r3, #192	; 0xc0
 8003104:	d013      	beq.n	800312e <UART_SetConfig+0x1ba>
 8003106:	2bc0      	cmp	r3, #192	; 0xc0
 8003108:	d814      	bhi.n	8003134 <UART_SetConfig+0x1c0>
 800310a:	2b80      	cmp	r3, #128	; 0x80
 800310c:	d009      	beq.n	8003122 <UART_SetConfig+0x1ae>
 800310e:	2b80      	cmp	r3, #128	; 0x80
 8003110:	d810      	bhi.n	8003134 <UART_SetConfig+0x1c0>
 8003112:	2b00      	cmp	r3, #0
 8003114:	d002      	beq.n	800311c <UART_SetConfig+0x1a8>
 8003116:	2b40      	cmp	r3, #64	; 0x40
 8003118:	d006      	beq.n	8003128 <UART_SetConfig+0x1b4>
 800311a:	e00b      	b.n	8003134 <UART_SetConfig+0x1c0>
 800311c:	2300      	movs	r3, #0
 800311e:	77fb      	strb	r3, [r7, #31]
 8003120:	e0cb      	b.n	80032ba <UART_SetConfig+0x346>
 8003122:	2302      	movs	r3, #2
 8003124:	77fb      	strb	r3, [r7, #31]
 8003126:	e0c8      	b.n	80032ba <UART_SetConfig+0x346>
 8003128:	2304      	movs	r3, #4
 800312a:	77fb      	strb	r3, [r7, #31]
 800312c:	e0c5      	b.n	80032ba <UART_SetConfig+0x346>
 800312e:	2308      	movs	r3, #8
 8003130:	77fb      	strb	r3, [r7, #31]
 8003132:	e0c2      	b.n	80032ba <UART_SetConfig+0x346>
 8003134:	2310      	movs	r3, #16
 8003136:	77fb      	strb	r3, [r7, #31]
 8003138:	e0bf      	b.n	80032ba <UART_SetConfig+0x346>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a45      	ldr	r2, [pc, #276]	; (8003254 <UART_SetConfig+0x2e0>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d125      	bne.n	8003190 <UART_SetConfig+0x21c>
 8003144:	4b3f      	ldr	r3, [pc, #252]	; (8003244 <UART_SetConfig+0x2d0>)
 8003146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800314e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003152:	d017      	beq.n	8003184 <UART_SetConfig+0x210>
 8003154:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003158:	d817      	bhi.n	800318a <UART_SetConfig+0x216>
 800315a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800315e:	d00b      	beq.n	8003178 <UART_SetConfig+0x204>
 8003160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003164:	d811      	bhi.n	800318a <UART_SetConfig+0x216>
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <UART_SetConfig+0x1fe>
 800316a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800316e:	d006      	beq.n	800317e <UART_SetConfig+0x20a>
 8003170:	e00b      	b.n	800318a <UART_SetConfig+0x216>
 8003172:	2300      	movs	r3, #0
 8003174:	77fb      	strb	r3, [r7, #31]
 8003176:	e0a0      	b.n	80032ba <UART_SetConfig+0x346>
 8003178:	2302      	movs	r3, #2
 800317a:	77fb      	strb	r3, [r7, #31]
 800317c:	e09d      	b.n	80032ba <UART_SetConfig+0x346>
 800317e:	2304      	movs	r3, #4
 8003180:	77fb      	strb	r3, [r7, #31]
 8003182:	e09a      	b.n	80032ba <UART_SetConfig+0x346>
 8003184:	2308      	movs	r3, #8
 8003186:	77fb      	strb	r3, [r7, #31]
 8003188:	e097      	b.n	80032ba <UART_SetConfig+0x346>
 800318a:	2310      	movs	r3, #16
 800318c:	77fb      	strb	r3, [r7, #31]
 800318e:	e094      	b.n	80032ba <UART_SetConfig+0x346>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a30      	ldr	r2, [pc, #192]	; (8003258 <UART_SetConfig+0x2e4>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d125      	bne.n	80031e6 <UART_SetConfig+0x272>
 800319a:	4b2a      	ldr	r3, [pc, #168]	; (8003244 <UART_SetConfig+0x2d0>)
 800319c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80031a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031a8:	d017      	beq.n	80031da <UART_SetConfig+0x266>
 80031aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031ae:	d817      	bhi.n	80031e0 <UART_SetConfig+0x26c>
 80031b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031b4:	d00b      	beq.n	80031ce <UART_SetConfig+0x25a>
 80031b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031ba:	d811      	bhi.n	80031e0 <UART_SetConfig+0x26c>
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <UART_SetConfig+0x254>
 80031c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c4:	d006      	beq.n	80031d4 <UART_SetConfig+0x260>
 80031c6:	e00b      	b.n	80031e0 <UART_SetConfig+0x26c>
 80031c8:	2301      	movs	r3, #1
 80031ca:	77fb      	strb	r3, [r7, #31]
 80031cc:	e075      	b.n	80032ba <UART_SetConfig+0x346>
 80031ce:	2302      	movs	r3, #2
 80031d0:	77fb      	strb	r3, [r7, #31]
 80031d2:	e072      	b.n	80032ba <UART_SetConfig+0x346>
 80031d4:	2304      	movs	r3, #4
 80031d6:	77fb      	strb	r3, [r7, #31]
 80031d8:	e06f      	b.n	80032ba <UART_SetConfig+0x346>
 80031da:	2308      	movs	r3, #8
 80031dc:	77fb      	strb	r3, [r7, #31]
 80031de:	e06c      	b.n	80032ba <UART_SetConfig+0x346>
 80031e0:	2310      	movs	r3, #16
 80031e2:	77fb      	strb	r3, [r7, #31]
 80031e4:	e069      	b.n	80032ba <UART_SetConfig+0x346>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a1c      	ldr	r2, [pc, #112]	; (800325c <UART_SetConfig+0x2e8>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d137      	bne.n	8003260 <UART_SetConfig+0x2ec>
 80031f0:	4b14      	ldr	r3, [pc, #80]	; (8003244 <UART_SetConfig+0x2d0>)
 80031f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80031fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80031fe:	d017      	beq.n	8003230 <UART_SetConfig+0x2bc>
 8003200:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003204:	d817      	bhi.n	8003236 <UART_SetConfig+0x2c2>
 8003206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800320a:	d00b      	beq.n	8003224 <UART_SetConfig+0x2b0>
 800320c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003210:	d811      	bhi.n	8003236 <UART_SetConfig+0x2c2>
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <UART_SetConfig+0x2aa>
 8003216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800321a:	d006      	beq.n	800322a <UART_SetConfig+0x2b6>
 800321c:	e00b      	b.n	8003236 <UART_SetConfig+0x2c2>
 800321e:	2300      	movs	r3, #0
 8003220:	77fb      	strb	r3, [r7, #31]
 8003222:	e04a      	b.n	80032ba <UART_SetConfig+0x346>
 8003224:	2302      	movs	r3, #2
 8003226:	77fb      	strb	r3, [r7, #31]
 8003228:	e047      	b.n	80032ba <UART_SetConfig+0x346>
 800322a:	2304      	movs	r3, #4
 800322c:	77fb      	strb	r3, [r7, #31]
 800322e:	e044      	b.n	80032ba <UART_SetConfig+0x346>
 8003230:	2308      	movs	r3, #8
 8003232:	77fb      	strb	r3, [r7, #31]
 8003234:	e041      	b.n	80032ba <UART_SetConfig+0x346>
 8003236:	2310      	movs	r3, #16
 8003238:	77fb      	strb	r3, [r7, #31]
 800323a:	e03e      	b.n	80032ba <UART_SetConfig+0x346>
 800323c:	efff69f3 	.word	0xefff69f3
 8003240:	40011000 	.word	0x40011000
 8003244:	40023800 	.word	0x40023800
 8003248:	40004400 	.word	0x40004400
 800324c:	40004800 	.word	0x40004800
 8003250:	40004c00 	.word	0x40004c00
 8003254:	40005000 	.word	0x40005000
 8003258:	40011400 	.word	0x40011400
 800325c:	40007800 	.word	0x40007800
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a71      	ldr	r2, [pc, #452]	; (800342c <UART_SetConfig+0x4b8>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d125      	bne.n	80032b6 <UART_SetConfig+0x342>
 800326a:	4b71      	ldr	r3, [pc, #452]	; (8003430 <UART_SetConfig+0x4bc>)
 800326c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003270:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003274:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003278:	d017      	beq.n	80032aa <UART_SetConfig+0x336>
 800327a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800327e:	d817      	bhi.n	80032b0 <UART_SetConfig+0x33c>
 8003280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003284:	d00b      	beq.n	800329e <UART_SetConfig+0x32a>
 8003286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800328a:	d811      	bhi.n	80032b0 <UART_SetConfig+0x33c>
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <UART_SetConfig+0x324>
 8003290:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003294:	d006      	beq.n	80032a4 <UART_SetConfig+0x330>
 8003296:	e00b      	b.n	80032b0 <UART_SetConfig+0x33c>
 8003298:	2300      	movs	r3, #0
 800329a:	77fb      	strb	r3, [r7, #31]
 800329c:	e00d      	b.n	80032ba <UART_SetConfig+0x346>
 800329e:	2302      	movs	r3, #2
 80032a0:	77fb      	strb	r3, [r7, #31]
 80032a2:	e00a      	b.n	80032ba <UART_SetConfig+0x346>
 80032a4:	2304      	movs	r3, #4
 80032a6:	77fb      	strb	r3, [r7, #31]
 80032a8:	e007      	b.n	80032ba <UART_SetConfig+0x346>
 80032aa:	2308      	movs	r3, #8
 80032ac:	77fb      	strb	r3, [r7, #31]
 80032ae:	e004      	b.n	80032ba <UART_SetConfig+0x346>
 80032b0:	2310      	movs	r3, #16
 80032b2:	77fb      	strb	r3, [r7, #31]
 80032b4:	e001      	b.n	80032ba <UART_SetConfig+0x346>
 80032b6:	2310      	movs	r3, #16
 80032b8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032c2:	d15b      	bne.n	800337c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80032c4:	7ffb      	ldrb	r3, [r7, #31]
 80032c6:	2b08      	cmp	r3, #8
 80032c8:	d827      	bhi.n	800331a <UART_SetConfig+0x3a6>
 80032ca:	a201      	add	r2, pc, #4	; (adr r2, 80032d0 <UART_SetConfig+0x35c>)
 80032cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d0:	080032f5 	.word	0x080032f5
 80032d4:	080032fd 	.word	0x080032fd
 80032d8:	08003305 	.word	0x08003305
 80032dc:	0800331b 	.word	0x0800331b
 80032e0:	0800330b 	.word	0x0800330b
 80032e4:	0800331b 	.word	0x0800331b
 80032e8:	0800331b 	.word	0x0800331b
 80032ec:	0800331b 	.word	0x0800331b
 80032f0:	08003313 	.word	0x08003313
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032f4:	f7fe fe68 	bl	8001fc8 <HAL_RCC_GetPCLK1Freq>
 80032f8:	61b8      	str	r0, [r7, #24]
        break;
 80032fa:	e013      	b.n	8003324 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032fc:	f7fe fe78 	bl	8001ff0 <HAL_RCC_GetPCLK2Freq>
 8003300:	61b8      	str	r0, [r7, #24]
        break;
 8003302:	e00f      	b.n	8003324 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003304:	4b4b      	ldr	r3, [pc, #300]	; (8003434 <UART_SetConfig+0x4c0>)
 8003306:	61bb      	str	r3, [r7, #24]
        break;
 8003308:	e00c      	b.n	8003324 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800330a:	f7fe fd6f 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 800330e:	61b8      	str	r0, [r7, #24]
        break;
 8003310:	e008      	b.n	8003324 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003316:	61bb      	str	r3, [r7, #24]
        break;
 8003318:	e004      	b.n	8003324 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	77bb      	strb	r3, [r7, #30]
        break;
 8003322:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d074      	beq.n	8003414 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	005a      	lsls	r2, r3, #1
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	085b      	lsrs	r3, r3, #1
 8003334:	441a      	add	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	fbb2 f3f3 	udiv	r3, r2, r3
 800333e:	b29b      	uxth	r3, r3
 8003340:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	2b0f      	cmp	r3, #15
 8003346:	d916      	bls.n	8003376 <UART_SetConfig+0x402>
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800334e:	d212      	bcs.n	8003376 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	b29b      	uxth	r3, r3
 8003354:	f023 030f 	bic.w	r3, r3, #15
 8003358:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	085b      	lsrs	r3, r3, #1
 800335e:	b29b      	uxth	r3, r3
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	b29a      	uxth	r2, r3
 8003366:	89fb      	ldrh	r3, [r7, #14]
 8003368:	4313      	orrs	r3, r2
 800336a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	89fa      	ldrh	r2, [r7, #14]
 8003372:	60da      	str	r2, [r3, #12]
 8003374:	e04e      	b.n	8003414 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	77bb      	strb	r3, [r7, #30]
 800337a:	e04b      	b.n	8003414 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800337c:	7ffb      	ldrb	r3, [r7, #31]
 800337e:	2b08      	cmp	r3, #8
 8003380:	d827      	bhi.n	80033d2 <UART_SetConfig+0x45e>
 8003382:	a201      	add	r2, pc, #4	; (adr r2, 8003388 <UART_SetConfig+0x414>)
 8003384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003388:	080033ad 	.word	0x080033ad
 800338c:	080033b5 	.word	0x080033b5
 8003390:	080033bd 	.word	0x080033bd
 8003394:	080033d3 	.word	0x080033d3
 8003398:	080033c3 	.word	0x080033c3
 800339c:	080033d3 	.word	0x080033d3
 80033a0:	080033d3 	.word	0x080033d3
 80033a4:	080033d3 	.word	0x080033d3
 80033a8:	080033cb 	.word	0x080033cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033ac:	f7fe fe0c 	bl	8001fc8 <HAL_RCC_GetPCLK1Freq>
 80033b0:	61b8      	str	r0, [r7, #24]
        break;
 80033b2:	e013      	b.n	80033dc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033b4:	f7fe fe1c 	bl	8001ff0 <HAL_RCC_GetPCLK2Freq>
 80033b8:	61b8      	str	r0, [r7, #24]
        break;
 80033ba:	e00f      	b.n	80033dc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033bc:	4b1d      	ldr	r3, [pc, #116]	; (8003434 <UART_SetConfig+0x4c0>)
 80033be:	61bb      	str	r3, [r7, #24]
        break;
 80033c0:	e00c      	b.n	80033dc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033c2:	f7fe fd13 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 80033c6:	61b8      	str	r0, [r7, #24]
        break;
 80033c8:	e008      	b.n	80033dc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ce:	61bb      	str	r3, [r7, #24]
        break;
 80033d0:	e004      	b.n	80033dc <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	77bb      	strb	r3, [r7, #30]
        break;
 80033da:	bf00      	nop
    }

    if (pclk != 0U)
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d018      	beq.n	8003414 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	085a      	lsrs	r2, r3, #1
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	441a      	add	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	2b0f      	cmp	r3, #15
 80033fc:	d908      	bls.n	8003410 <UART_SetConfig+0x49c>
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003404:	d204      	bcs.n	8003410 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	60da      	str	r2, [r3, #12]
 800340e:	e001      	b.n	8003414 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003420:	7fbb      	ldrb	r3, [r7, #30]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3720      	adds	r7, #32
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	40007c00 	.word	0x40007c00
 8003430:	40023800 	.word	0x40023800
 8003434:	00f42400 	.word	0x00f42400

08003438 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00a      	beq.n	8003462 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00a      	beq.n	8003484 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00a      	beq.n	80034a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00a      	beq.n	80034c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	f003 0310 	and.w	r3, r3, #16
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00a      	beq.n	80034ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	f003 0320 	and.w	r3, r3, #32
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003514:	2b00      	cmp	r3, #0
 8003516:	d01a      	beq.n	800354e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003536:	d10a      	bne.n	800354e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	605a      	str	r2, [r3, #4]
  }
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af02      	add	r7, sp, #8
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800358c:	f7fd fcf4 	bl	8000f78 <HAL_GetTick>
 8003590:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0308 	and.w	r3, r3, #8
 800359c:	2b08      	cmp	r3, #8
 800359e:	d10e      	bne.n	80035be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f817 	bl	80035e2 <UART_WaitOnFlagUntilTimeout>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e00d      	b.n	80035da <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2220      	movs	r2, #32
 80035c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2220      	movs	r2, #32
 80035c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b084      	sub	sp, #16
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	603b      	str	r3, [r7, #0]
 80035ee:	4613      	mov	r3, r2
 80035f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035f2:	e05e      	b.n	80036b2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fa:	d05a      	beq.n	80036b2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035fc:	f7fd fcbc 	bl	8000f78 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	429a      	cmp	r2, r3
 800360a:	d302      	bcc.n	8003612 <UART_WaitOnFlagUntilTimeout+0x30>
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d11b      	bne.n	800364a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003620:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0201 	bic.w	r2, r2, #1
 8003630:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2220      	movs	r2, #32
 8003636:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2220      	movs	r2, #32
 800363c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e043      	b.n	80036d2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	d02c      	beq.n	80036b2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003666:	d124      	bne.n	80036b2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003670:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003680:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0201 	bic.w	r2, r2, #1
 8003690:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2220      	movs	r2, #32
 8003696:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2220      	movs	r2, #32
 800369c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2220      	movs	r2, #32
 80036a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e00f      	b.n	80036d2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	69da      	ldr	r2, [r3, #28]
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	4013      	ands	r3, r2
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	429a      	cmp	r2, r3
 80036c0:	bf0c      	ite	eq
 80036c2:	2301      	moveq	r3, #1
 80036c4:	2300      	movne	r3, #0
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	461a      	mov	r2, r3
 80036ca:	79fb      	ldrb	r3, [r7, #7]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d091      	beq.n	80035f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80036f0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0201 	bic.w	r2, r2, #1
 8003700:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003706:	2b01      	cmp	r3, #1
 8003708:	d107      	bne.n	800371a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0210 	bic.w	r2, r2, #16
 8003718:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2220      	movs	r2, #32
 800371e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003744:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f7ff fbf6 	bl	8002f48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800375c:	bf00      	nop
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800377a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2220      	movs	r2, #32
 8003780:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f7ff fbd3 	bl	8002f34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800378e:	bf00      	nop
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
	...

08003798 <__errno>:
 8003798:	4b01      	ldr	r3, [pc, #4]	; (80037a0 <__errno+0x8>)
 800379a:	6818      	ldr	r0, [r3, #0]
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	2000000c 	.word	0x2000000c

080037a4 <__libc_init_array>:
 80037a4:	b570      	push	{r4, r5, r6, lr}
 80037a6:	4d0d      	ldr	r5, [pc, #52]	; (80037dc <__libc_init_array+0x38>)
 80037a8:	4c0d      	ldr	r4, [pc, #52]	; (80037e0 <__libc_init_array+0x3c>)
 80037aa:	1b64      	subs	r4, r4, r5
 80037ac:	10a4      	asrs	r4, r4, #2
 80037ae:	2600      	movs	r6, #0
 80037b0:	42a6      	cmp	r6, r4
 80037b2:	d109      	bne.n	80037c8 <__libc_init_array+0x24>
 80037b4:	4d0b      	ldr	r5, [pc, #44]	; (80037e4 <__libc_init_array+0x40>)
 80037b6:	4c0c      	ldr	r4, [pc, #48]	; (80037e8 <__libc_init_array+0x44>)
 80037b8:	f000 ff76 	bl	80046a8 <_init>
 80037bc:	1b64      	subs	r4, r4, r5
 80037be:	10a4      	asrs	r4, r4, #2
 80037c0:	2600      	movs	r6, #0
 80037c2:	42a6      	cmp	r6, r4
 80037c4:	d105      	bne.n	80037d2 <__libc_init_array+0x2e>
 80037c6:	bd70      	pop	{r4, r5, r6, pc}
 80037c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80037cc:	4798      	blx	r3
 80037ce:	3601      	adds	r6, #1
 80037d0:	e7ee      	b.n	80037b0 <__libc_init_array+0xc>
 80037d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037d6:	4798      	blx	r3
 80037d8:	3601      	adds	r6, #1
 80037da:	e7f2      	b.n	80037c2 <__libc_init_array+0x1e>
 80037dc:	08004808 	.word	0x08004808
 80037e0:	08004808 	.word	0x08004808
 80037e4:	08004808 	.word	0x08004808
 80037e8:	0800480c 	.word	0x0800480c

080037ec <memset>:
 80037ec:	4402      	add	r2, r0
 80037ee:	4603      	mov	r3, r0
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d100      	bne.n	80037f6 <memset+0xa>
 80037f4:	4770      	bx	lr
 80037f6:	f803 1b01 	strb.w	r1, [r3], #1
 80037fa:	e7f9      	b.n	80037f0 <memset+0x4>

080037fc <iprintf>:
 80037fc:	b40f      	push	{r0, r1, r2, r3}
 80037fe:	4b0a      	ldr	r3, [pc, #40]	; (8003828 <iprintf+0x2c>)
 8003800:	b513      	push	{r0, r1, r4, lr}
 8003802:	681c      	ldr	r4, [r3, #0]
 8003804:	b124      	cbz	r4, 8003810 <iprintf+0x14>
 8003806:	69a3      	ldr	r3, [r4, #24]
 8003808:	b913      	cbnz	r3, 8003810 <iprintf+0x14>
 800380a:	4620      	mov	r0, r4
 800380c:	f000 f866 	bl	80038dc <__sinit>
 8003810:	ab05      	add	r3, sp, #20
 8003812:	9a04      	ldr	r2, [sp, #16]
 8003814:	68a1      	ldr	r1, [r4, #8]
 8003816:	9301      	str	r3, [sp, #4]
 8003818:	4620      	mov	r0, r4
 800381a:	f000 f983 	bl	8003b24 <_vfiprintf_r>
 800381e:	b002      	add	sp, #8
 8003820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003824:	b004      	add	sp, #16
 8003826:	4770      	bx	lr
 8003828:	2000000c 	.word	0x2000000c

0800382c <std>:
 800382c:	2300      	movs	r3, #0
 800382e:	b510      	push	{r4, lr}
 8003830:	4604      	mov	r4, r0
 8003832:	e9c0 3300 	strd	r3, r3, [r0]
 8003836:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800383a:	6083      	str	r3, [r0, #8]
 800383c:	8181      	strh	r1, [r0, #12]
 800383e:	6643      	str	r3, [r0, #100]	; 0x64
 8003840:	81c2      	strh	r2, [r0, #14]
 8003842:	6183      	str	r3, [r0, #24]
 8003844:	4619      	mov	r1, r3
 8003846:	2208      	movs	r2, #8
 8003848:	305c      	adds	r0, #92	; 0x5c
 800384a:	f7ff ffcf 	bl	80037ec <memset>
 800384e:	4b05      	ldr	r3, [pc, #20]	; (8003864 <std+0x38>)
 8003850:	6263      	str	r3, [r4, #36]	; 0x24
 8003852:	4b05      	ldr	r3, [pc, #20]	; (8003868 <std+0x3c>)
 8003854:	62a3      	str	r3, [r4, #40]	; 0x28
 8003856:	4b05      	ldr	r3, [pc, #20]	; (800386c <std+0x40>)
 8003858:	62e3      	str	r3, [r4, #44]	; 0x2c
 800385a:	4b05      	ldr	r3, [pc, #20]	; (8003870 <std+0x44>)
 800385c:	6224      	str	r4, [r4, #32]
 800385e:	6323      	str	r3, [r4, #48]	; 0x30
 8003860:	bd10      	pop	{r4, pc}
 8003862:	bf00      	nop
 8003864:	080040cd 	.word	0x080040cd
 8003868:	080040ef 	.word	0x080040ef
 800386c:	08004127 	.word	0x08004127
 8003870:	0800414b 	.word	0x0800414b

08003874 <_cleanup_r>:
 8003874:	4901      	ldr	r1, [pc, #4]	; (800387c <_cleanup_r+0x8>)
 8003876:	f000 b8af 	b.w	80039d8 <_fwalk_reent>
 800387a:	bf00      	nop
 800387c:	08004425 	.word	0x08004425

08003880 <__sfmoreglue>:
 8003880:	b570      	push	{r4, r5, r6, lr}
 8003882:	1e4a      	subs	r2, r1, #1
 8003884:	2568      	movs	r5, #104	; 0x68
 8003886:	4355      	muls	r5, r2
 8003888:	460e      	mov	r6, r1
 800388a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800388e:	f000 f8c5 	bl	8003a1c <_malloc_r>
 8003892:	4604      	mov	r4, r0
 8003894:	b140      	cbz	r0, 80038a8 <__sfmoreglue+0x28>
 8003896:	2100      	movs	r1, #0
 8003898:	e9c0 1600 	strd	r1, r6, [r0]
 800389c:	300c      	adds	r0, #12
 800389e:	60a0      	str	r0, [r4, #8]
 80038a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80038a4:	f7ff ffa2 	bl	80037ec <memset>
 80038a8:	4620      	mov	r0, r4
 80038aa:	bd70      	pop	{r4, r5, r6, pc}

080038ac <__sfp_lock_acquire>:
 80038ac:	4801      	ldr	r0, [pc, #4]	; (80038b4 <__sfp_lock_acquire+0x8>)
 80038ae:	f000 b8b3 	b.w	8003a18 <__retarget_lock_acquire_recursive>
 80038b2:	bf00      	nop
 80038b4:	200001ac 	.word	0x200001ac

080038b8 <__sfp_lock_release>:
 80038b8:	4801      	ldr	r0, [pc, #4]	; (80038c0 <__sfp_lock_release+0x8>)
 80038ba:	f000 b8ae 	b.w	8003a1a <__retarget_lock_release_recursive>
 80038be:	bf00      	nop
 80038c0:	200001ac 	.word	0x200001ac

080038c4 <__sinit_lock_acquire>:
 80038c4:	4801      	ldr	r0, [pc, #4]	; (80038cc <__sinit_lock_acquire+0x8>)
 80038c6:	f000 b8a7 	b.w	8003a18 <__retarget_lock_acquire_recursive>
 80038ca:	bf00      	nop
 80038cc:	200001a7 	.word	0x200001a7

080038d0 <__sinit_lock_release>:
 80038d0:	4801      	ldr	r0, [pc, #4]	; (80038d8 <__sinit_lock_release+0x8>)
 80038d2:	f000 b8a2 	b.w	8003a1a <__retarget_lock_release_recursive>
 80038d6:	bf00      	nop
 80038d8:	200001a7 	.word	0x200001a7

080038dc <__sinit>:
 80038dc:	b510      	push	{r4, lr}
 80038de:	4604      	mov	r4, r0
 80038e0:	f7ff fff0 	bl	80038c4 <__sinit_lock_acquire>
 80038e4:	69a3      	ldr	r3, [r4, #24]
 80038e6:	b11b      	cbz	r3, 80038f0 <__sinit+0x14>
 80038e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038ec:	f7ff bff0 	b.w	80038d0 <__sinit_lock_release>
 80038f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80038f4:	6523      	str	r3, [r4, #80]	; 0x50
 80038f6:	4b13      	ldr	r3, [pc, #76]	; (8003944 <__sinit+0x68>)
 80038f8:	4a13      	ldr	r2, [pc, #76]	; (8003948 <__sinit+0x6c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80038fe:	42a3      	cmp	r3, r4
 8003900:	bf04      	itt	eq
 8003902:	2301      	moveq	r3, #1
 8003904:	61a3      	streq	r3, [r4, #24]
 8003906:	4620      	mov	r0, r4
 8003908:	f000 f820 	bl	800394c <__sfp>
 800390c:	6060      	str	r0, [r4, #4]
 800390e:	4620      	mov	r0, r4
 8003910:	f000 f81c 	bl	800394c <__sfp>
 8003914:	60a0      	str	r0, [r4, #8]
 8003916:	4620      	mov	r0, r4
 8003918:	f000 f818 	bl	800394c <__sfp>
 800391c:	2200      	movs	r2, #0
 800391e:	60e0      	str	r0, [r4, #12]
 8003920:	2104      	movs	r1, #4
 8003922:	6860      	ldr	r0, [r4, #4]
 8003924:	f7ff ff82 	bl	800382c <std>
 8003928:	68a0      	ldr	r0, [r4, #8]
 800392a:	2201      	movs	r2, #1
 800392c:	2109      	movs	r1, #9
 800392e:	f7ff ff7d 	bl	800382c <std>
 8003932:	68e0      	ldr	r0, [r4, #12]
 8003934:	2202      	movs	r2, #2
 8003936:	2112      	movs	r1, #18
 8003938:	f7ff ff78 	bl	800382c <std>
 800393c:	2301      	movs	r3, #1
 800393e:	61a3      	str	r3, [r4, #24]
 8003940:	e7d2      	b.n	80038e8 <__sinit+0xc>
 8003942:	bf00      	nop
 8003944:	08004768 	.word	0x08004768
 8003948:	08003875 	.word	0x08003875

0800394c <__sfp>:
 800394c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800394e:	4607      	mov	r7, r0
 8003950:	f7ff ffac 	bl	80038ac <__sfp_lock_acquire>
 8003954:	4b1e      	ldr	r3, [pc, #120]	; (80039d0 <__sfp+0x84>)
 8003956:	681e      	ldr	r6, [r3, #0]
 8003958:	69b3      	ldr	r3, [r6, #24]
 800395a:	b913      	cbnz	r3, 8003962 <__sfp+0x16>
 800395c:	4630      	mov	r0, r6
 800395e:	f7ff ffbd 	bl	80038dc <__sinit>
 8003962:	3648      	adds	r6, #72	; 0x48
 8003964:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003968:	3b01      	subs	r3, #1
 800396a:	d503      	bpl.n	8003974 <__sfp+0x28>
 800396c:	6833      	ldr	r3, [r6, #0]
 800396e:	b30b      	cbz	r3, 80039b4 <__sfp+0x68>
 8003970:	6836      	ldr	r6, [r6, #0]
 8003972:	e7f7      	b.n	8003964 <__sfp+0x18>
 8003974:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003978:	b9d5      	cbnz	r5, 80039b0 <__sfp+0x64>
 800397a:	4b16      	ldr	r3, [pc, #88]	; (80039d4 <__sfp+0x88>)
 800397c:	60e3      	str	r3, [r4, #12]
 800397e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003982:	6665      	str	r5, [r4, #100]	; 0x64
 8003984:	f000 f847 	bl	8003a16 <__retarget_lock_init_recursive>
 8003988:	f7ff ff96 	bl	80038b8 <__sfp_lock_release>
 800398c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003990:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003994:	6025      	str	r5, [r4, #0]
 8003996:	61a5      	str	r5, [r4, #24]
 8003998:	2208      	movs	r2, #8
 800399a:	4629      	mov	r1, r5
 800399c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80039a0:	f7ff ff24 	bl	80037ec <memset>
 80039a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80039a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80039ac:	4620      	mov	r0, r4
 80039ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039b0:	3468      	adds	r4, #104	; 0x68
 80039b2:	e7d9      	b.n	8003968 <__sfp+0x1c>
 80039b4:	2104      	movs	r1, #4
 80039b6:	4638      	mov	r0, r7
 80039b8:	f7ff ff62 	bl	8003880 <__sfmoreglue>
 80039bc:	4604      	mov	r4, r0
 80039be:	6030      	str	r0, [r6, #0]
 80039c0:	2800      	cmp	r0, #0
 80039c2:	d1d5      	bne.n	8003970 <__sfp+0x24>
 80039c4:	f7ff ff78 	bl	80038b8 <__sfp_lock_release>
 80039c8:	230c      	movs	r3, #12
 80039ca:	603b      	str	r3, [r7, #0]
 80039cc:	e7ee      	b.n	80039ac <__sfp+0x60>
 80039ce:	bf00      	nop
 80039d0:	08004768 	.word	0x08004768
 80039d4:	ffff0001 	.word	0xffff0001

080039d8 <_fwalk_reent>:
 80039d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039dc:	4606      	mov	r6, r0
 80039de:	4688      	mov	r8, r1
 80039e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80039e4:	2700      	movs	r7, #0
 80039e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80039ea:	f1b9 0901 	subs.w	r9, r9, #1
 80039ee:	d505      	bpl.n	80039fc <_fwalk_reent+0x24>
 80039f0:	6824      	ldr	r4, [r4, #0]
 80039f2:	2c00      	cmp	r4, #0
 80039f4:	d1f7      	bne.n	80039e6 <_fwalk_reent+0xe>
 80039f6:	4638      	mov	r0, r7
 80039f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039fc:	89ab      	ldrh	r3, [r5, #12]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d907      	bls.n	8003a12 <_fwalk_reent+0x3a>
 8003a02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a06:	3301      	adds	r3, #1
 8003a08:	d003      	beq.n	8003a12 <_fwalk_reent+0x3a>
 8003a0a:	4629      	mov	r1, r5
 8003a0c:	4630      	mov	r0, r6
 8003a0e:	47c0      	blx	r8
 8003a10:	4307      	orrs	r7, r0
 8003a12:	3568      	adds	r5, #104	; 0x68
 8003a14:	e7e9      	b.n	80039ea <_fwalk_reent+0x12>

08003a16 <__retarget_lock_init_recursive>:
 8003a16:	4770      	bx	lr

08003a18 <__retarget_lock_acquire_recursive>:
 8003a18:	4770      	bx	lr

08003a1a <__retarget_lock_release_recursive>:
 8003a1a:	4770      	bx	lr

08003a1c <_malloc_r>:
 8003a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1e:	1ccd      	adds	r5, r1, #3
 8003a20:	f025 0503 	bic.w	r5, r5, #3
 8003a24:	3508      	adds	r5, #8
 8003a26:	2d0c      	cmp	r5, #12
 8003a28:	bf38      	it	cc
 8003a2a:	250c      	movcc	r5, #12
 8003a2c:	2d00      	cmp	r5, #0
 8003a2e:	4606      	mov	r6, r0
 8003a30:	db01      	blt.n	8003a36 <_malloc_r+0x1a>
 8003a32:	42a9      	cmp	r1, r5
 8003a34:	d903      	bls.n	8003a3e <_malloc_r+0x22>
 8003a36:	230c      	movs	r3, #12
 8003a38:	6033      	str	r3, [r6, #0]
 8003a3a:	2000      	movs	r0, #0
 8003a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a3e:	f000 fda3 	bl	8004588 <__malloc_lock>
 8003a42:	4921      	ldr	r1, [pc, #132]	; (8003ac8 <_malloc_r+0xac>)
 8003a44:	680a      	ldr	r2, [r1, #0]
 8003a46:	4614      	mov	r4, r2
 8003a48:	b99c      	cbnz	r4, 8003a72 <_malloc_r+0x56>
 8003a4a:	4f20      	ldr	r7, [pc, #128]	; (8003acc <_malloc_r+0xb0>)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	b923      	cbnz	r3, 8003a5a <_malloc_r+0x3e>
 8003a50:	4621      	mov	r1, r4
 8003a52:	4630      	mov	r0, r6
 8003a54:	f000 fb2a 	bl	80040ac <_sbrk_r>
 8003a58:	6038      	str	r0, [r7, #0]
 8003a5a:	4629      	mov	r1, r5
 8003a5c:	4630      	mov	r0, r6
 8003a5e:	f000 fb25 	bl	80040ac <_sbrk_r>
 8003a62:	1c43      	adds	r3, r0, #1
 8003a64:	d123      	bne.n	8003aae <_malloc_r+0x92>
 8003a66:	230c      	movs	r3, #12
 8003a68:	6033      	str	r3, [r6, #0]
 8003a6a:	4630      	mov	r0, r6
 8003a6c:	f000 fd92 	bl	8004594 <__malloc_unlock>
 8003a70:	e7e3      	b.n	8003a3a <_malloc_r+0x1e>
 8003a72:	6823      	ldr	r3, [r4, #0]
 8003a74:	1b5b      	subs	r3, r3, r5
 8003a76:	d417      	bmi.n	8003aa8 <_malloc_r+0x8c>
 8003a78:	2b0b      	cmp	r3, #11
 8003a7a:	d903      	bls.n	8003a84 <_malloc_r+0x68>
 8003a7c:	6023      	str	r3, [r4, #0]
 8003a7e:	441c      	add	r4, r3
 8003a80:	6025      	str	r5, [r4, #0]
 8003a82:	e004      	b.n	8003a8e <_malloc_r+0x72>
 8003a84:	6863      	ldr	r3, [r4, #4]
 8003a86:	42a2      	cmp	r2, r4
 8003a88:	bf0c      	ite	eq
 8003a8a:	600b      	streq	r3, [r1, #0]
 8003a8c:	6053      	strne	r3, [r2, #4]
 8003a8e:	4630      	mov	r0, r6
 8003a90:	f000 fd80 	bl	8004594 <__malloc_unlock>
 8003a94:	f104 000b 	add.w	r0, r4, #11
 8003a98:	1d23      	adds	r3, r4, #4
 8003a9a:	f020 0007 	bic.w	r0, r0, #7
 8003a9e:	1ac2      	subs	r2, r0, r3
 8003aa0:	d0cc      	beq.n	8003a3c <_malloc_r+0x20>
 8003aa2:	1a1b      	subs	r3, r3, r0
 8003aa4:	50a3      	str	r3, [r4, r2]
 8003aa6:	e7c9      	b.n	8003a3c <_malloc_r+0x20>
 8003aa8:	4622      	mov	r2, r4
 8003aaa:	6864      	ldr	r4, [r4, #4]
 8003aac:	e7cc      	b.n	8003a48 <_malloc_r+0x2c>
 8003aae:	1cc4      	adds	r4, r0, #3
 8003ab0:	f024 0403 	bic.w	r4, r4, #3
 8003ab4:	42a0      	cmp	r0, r4
 8003ab6:	d0e3      	beq.n	8003a80 <_malloc_r+0x64>
 8003ab8:	1a21      	subs	r1, r4, r0
 8003aba:	4630      	mov	r0, r6
 8003abc:	f000 faf6 	bl	80040ac <_sbrk_r>
 8003ac0:	3001      	adds	r0, #1
 8003ac2:	d1dd      	bne.n	8003a80 <_malloc_r+0x64>
 8003ac4:	e7cf      	b.n	8003a66 <_malloc_r+0x4a>
 8003ac6:	bf00      	nop
 8003ac8:	20000090 	.word	0x20000090
 8003acc:	20000094 	.word	0x20000094

08003ad0 <__sfputc_r>:
 8003ad0:	6893      	ldr	r3, [r2, #8]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	b410      	push	{r4}
 8003ad8:	6093      	str	r3, [r2, #8]
 8003ada:	da08      	bge.n	8003aee <__sfputc_r+0x1e>
 8003adc:	6994      	ldr	r4, [r2, #24]
 8003ade:	42a3      	cmp	r3, r4
 8003ae0:	db01      	blt.n	8003ae6 <__sfputc_r+0x16>
 8003ae2:	290a      	cmp	r1, #10
 8003ae4:	d103      	bne.n	8003aee <__sfputc_r+0x1e>
 8003ae6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003aea:	f000 bb33 	b.w	8004154 <__swbuf_r>
 8003aee:	6813      	ldr	r3, [r2, #0]
 8003af0:	1c58      	adds	r0, r3, #1
 8003af2:	6010      	str	r0, [r2, #0]
 8003af4:	7019      	strb	r1, [r3, #0]
 8003af6:	4608      	mov	r0, r1
 8003af8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <__sfputs_r>:
 8003afe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b00:	4606      	mov	r6, r0
 8003b02:	460f      	mov	r7, r1
 8003b04:	4614      	mov	r4, r2
 8003b06:	18d5      	adds	r5, r2, r3
 8003b08:	42ac      	cmp	r4, r5
 8003b0a:	d101      	bne.n	8003b10 <__sfputs_r+0x12>
 8003b0c:	2000      	movs	r0, #0
 8003b0e:	e007      	b.n	8003b20 <__sfputs_r+0x22>
 8003b10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b14:	463a      	mov	r2, r7
 8003b16:	4630      	mov	r0, r6
 8003b18:	f7ff ffda 	bl	8003ad0 <__sfputc_r>
 8003b1c:	1c43      	adds	r3, r0, #1
 8003b1e:	d1f3      	bne.n	8003b08 <__sfputs_r+0xa>
 8003b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003b24 <_vfiprintf_r>:
 8003b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b28:	460d      	mov	r5, r1
 8003b2a:	b09d      	sub	sp, #116	; 0x74
 8003b2c:	4614      	mov	r4, r2
 8003b2e:	4698      	mov	r8, r3
 8003b30:	4606      	mov	r6, r0
 8003b32:	b118      	cbz	r0, 8003b3c <_vfiprintf_r+0x18>
 8003b34:	6983      	ldr	r3, [r0, #24]
 8003b36:	b90b      	cbnz	r3, 8003b3c <_vfiprintf_r+0x18>
 8003b38:	f7ff fed0 	bl	80038dc <__sinit>
 8003b3c:	4b89      	ldr	r3, [pc, #548]	; (8003d64 <_vfiprintf_r+0x240>)
 8003b3e:	429d      	cmp	r5, r3
 8003b40:	d11b      	bne.n	8003b7a <_vfiprintf_r+0x56>
 8003b42:	6875      	ldr	r5, [r6, #4]
 8003b44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b46:	07d9      	lsls	r1, r3, #31
 8003b48:	d405      	bmi.n	8003b56 <_vfiprintf_r+0x32>
 8003b4a:	89ab      	ldrh	r3, [r5, #12]
 8003b4c:	059a      	lsls	r2, r3, #22
 8003b4e:	d402      	bmi.n	8003b56 <_vfiprintf_r+0x32>
 8003b50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b52:	f7ff ff61 	bl	8003a18 <__retarget_lock_acquire_recursive>
 8003b56:	89ab      	ldrh	r3, [r5, #12]
 8003b58:	071b      	lsls	r3, r3, #28
 8003b5a:	d501      	bpl.n	8003b60 <_vfiprintf_r+0x3c>
 8003b5c:	692b      	ldr	r3, [r5, #16]
 8003b5e:	b9eb      	cbnz	r3, 8003b9c <_vfiprintf_r+0x78>
 8003b60:	4629      	mov	r1, r5
 8003b62:	4630      	mov	r0, r6
 8003b64:	f000 fb5a 	bl	800421c <__swsetup_r>
 8003b68:	b1c0      	cbz	r0, 8003b9c <_vfiprintf_r+0x78>
 8003b6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b6c:	07dc      	lsls	r4, r3, #31
 8003b6e:	d50e      	bpl.n	8003b8e <_vfiprintf_r+0x6a>
 8003b70:	f04f 30ff 	mov.w	r0, #4294967295
 8003b74:	b01d      	add	sp, #116	; 0x74
 8003b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b7a:	4b7b      	ldr	r3, [pc, #492]	; (8003d68 <_vfiprintf_r+0x244>)
 8003b7c:	429d      	cmp	r5, r3
 8003b7e:	d101      	bne.n	8003b84 <_vfiprintf_r+0x60>
 8003b80:	68b5      	ldr	r5, [r6, #8]
 8003b82:	e7df      	b.n	8003b44 <_vfiprintf_r+0x20>
 8003b84:	4b79      	ldr	r3, [pc, #484]	; (8003d6c <_vfiprintf_r+0x248>)
 8003b86:	429d      	cmp	r5, r3
 8003b88:	bf08      	it	eq
 8003b8a:	68f5      	ldreq	r5, [r6, #12]
 8003b8c:	e7da      	b.n	8003b44 <_vfiprintf_r+0x20>
 8003b8e:	89ab      	ldrh	r3, [r5, #12]
 8003b90:	0598      	lsls	r0, r3, #22
 8003b92:	d4ed      	bmi.n	8003b70 <_vfiprintf_r+0x4c>
 8003b94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b96:	f7ff ff40 	bl	8003a1a <__retarget_lock_release_recursive>
 8003b9a:	e7e9      	b.n	8003b70 <_vfiprintf_r+0x4c>
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	9309      	str	r3, [sp, #36]	; 0x24
 8003ba0:	2320      	movs	r3, #32
 8003ba2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ba6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003baa:	2330      	movs	r3, #48	; 0x30
 8003bac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003d70 <_vfiprintf_r+0x24c>
 8003bb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003bb4:	f04f 0901 	mov.w	r9, #1
 8003bb8:	4623      	mov	r3, r4
 8003bba:	469a      	mov	sl, r3
 8003bbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bc0:	b10a      	cbz	r2, 8003bc6 <_vfiprintf_r+0xa2>
 8003bc2:	2a25      	cmp	r2, #37	; 0x25
 8003bc4:	d1f9      	bne.n	8003bba <_vfiprintf_r+0x96>
 8003bc6:	ebba 0b04 	subs.w	fp, sl, r4
 8003bca:	d00b      	beq.n	8003be4 <_vfiprintf_r+0xc0>
 8003bcc:	465b      	mov	r3, fp
 8003bce:	4622      	mov	r2, r4
 8003bd0:	4629      	mov	r1, r5
 8003bd2:	4630      	mov	r0, r6
 8003bd4:	f7ff ff93 	bl	8003afe <__sfputs_r>
 8003bd8:	3001      	adds	r0, #1
 8003bda:	f000 80aa 	beq.w	8003d32 <_vfiprintf_r+0x20e>
 8003bde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003be0:	445a      	add	r2, fp
 8003be2:	9209      	str	r2, [sp, #36]	; 0x24
 8003be4:	f89a 3000 	ldrb.w	r3, [sl]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 80a2 	beq.w	8003d32 <_vfiprintf_r+0x20e>
 8003bee:	2300      	movs	r3, #0
 8003bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8003bf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bf8:	f10a 0a01 	add.w	sl, sl, #1
 8003bfc:	9304      	str	r3, [sp, #16]
 8003bfe:	9307      	str	r3, [sp, #28]
 8003c00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c04:	931a      	str	r3, [sp, #104]	; 0x68
 8003c06:	4654      	mov	r4, sl
 8003c08:	2205      	movs	r2, #5
 8003c0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c0e:	4858      	ldr	r0, [pc, #352]	; (8003d70 <_vfiprintf_r+0x24c>)
 8003c10:	f7fc fb06 	bl	8000220 <memchr>
 8003c14:	9a04      	ldr	r2, [sp, #16]
 8003c16:	b9d8      	cbnz	r0, 8003c50 <_vfiprintf_r+0x12c>
 8003c18:	06d1      	lsls	r1, r2, #27
 8003c1a:	bf44      	itt	mi
 8003c1c:	2320      	movmi	r3, #32
 8003c1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c22:	0713      	lsls	r3, r2, #28
 8003c24:	bf44      	itt	mi
 8003c26:	232b      	movmi	r3, #43	; 0x2b
 8003c28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c2c:	f89a 3000 	ldrb.w	r3, [sl]
 8003c30:	2b2a      	cmp	r3, #42	; 0x2a
 8003c32:	d015      	beq.n	8003c60 <_vfiprintf_r+0x13c>
 8003c34:	9a07      	ldr	r2, [sp, #28]
 8003c36:	4654      	mov	r4, sl
 8003c38:	2000      	movs	r0, #0
 8003c3a:	f04f 0c0a 	mov.w	ip, #10
 8003c3e:	4621      	mov	r1, r4
 8003c40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c44:	3b30      	subs	r3, #48	; 0x30
 8003c46:	2b09      	cmp	r3, #9
 8003c48:	d94e      	bls.n	8003ce8 <_vfiprintf_r+0x1c4>
 8003c4a:	b1b0      	cbz	r0, 8003c7a <_vfiprintf_r+0x156>
 8003c4c:	9207      	str	r2, [sp, #28]
 8003c4e:	e014      	b.n	8003c7a <_vfiprintf_r+0x156>
 8003c50:	eba0 0308 	sub.w	r3, r0, r8
 8003c54:	fa09 f303 	lsl.w	r3, r9, r3
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	9304      	str	r3, [sp, #16]
 8003c5c:	46a2      	mov	sl, r4
 8003c5e:	e7d2      	b.n	8003c06 <_vfiprintf_r+0xe2>
 8003c60:	9b03      	ldr	r3, [sp, #12]
 8003c62:	1d19      	adds	r1, r3, #4
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	9103      	str	r1, [sp, #12]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	bfbb      	ittet	lt
 8003c6c:	425b      	neglt	r3, r3
 8003c6e:	f042 0202 	orrlt.w	r2, r2, #2
 8003c72:	9307      	strge	r3, [sp, #28]
 8003c74:	9307      	strlt	r3, [sp, #28]
 8003c76:	bfb8      	it	lt
 8003c78:	9204      	strlt	r2, [sp, #16]
 8003c7a:	7823      	ldrb	r3, [r4, #0]
 8003c7c:	2b2e      	cmp	r3, #46	; 0x2e
 8003c7e:	d10c      	bne.n	8003c9a <_vfiprintf_r+0x176>
 8003c80:	7863      	ldrb	r3, [r4, #1]
 8003c82:	2b2a      	cmp	r3, #42	; 0x2a
 8003c84:	d135      	bne.n	8003cf2 <_vfiprintf_r+0x1ce>
 8003c86:	9b03      	ldr	r3, [sp, #12]
 8003c88:	1d1a      	adds	r2, r3, #4
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	9203      	str	r2, [sp, #12]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	bfb8      	it	lt
 8003c92:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c96:	3402      	adds	r4, #2
 8003c98:	9305      	str	r3, [sp, #20]
 8003c9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003d80 <_vfiprintf_r+0x25c>
 8003c9e:	7821      	ldrb	r1, [r4, #0]
 8003ca0:	2203      	movs	r2, #3
 8003ca2:	4650      	mov	r0, sl
 8003ca4:	f7fc fabc 	bl	8000220 <memchr>
 8003ca8:	b140      	cbz	r0, 8003cbc <_vfiprintf_r+0x198>
 8003caa:	2340      	movs	r3, #64	; 0x40
 8003cac:	eba0 000a 	sub.w	r0, r0, sl
 8003cb0:	fa03 f000 	lsl.w	r0, r3, r0
 8003cb4:	9b04      	ldr	r3, [sp, #16]
 8003cb6:	4303      	orrs	r3, r0
 8003cb8:	3401      	adds	r4, #1
 8003cba:	9304      	str	r3, [sp, #16]
 8003cbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cc0:	482c      	ldr	r0, [pc, #176]	; (8003d74 <_vfiprintf_r+0x250>)
 8003cc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003cc6:	2206      	movs	r2, #6
 8003cc8:	f7fc faaa 	bl	8000220 <memchr>
 8003ccc:	2800      	cmp	r0, #0
 8003cce:	d03f      	beq.n	8003d50 <_vfiprintf_r+0x22c>
 8003cd0:	4b29      	ldr	r3, [pc, #164]	; (8003d78 <_vfiprintf_r+0x254>)
 8003cd2:	bb1b      	cbnz	r3, 8003d1c <_vfiprintf_r+0x1f8>
 8003cd4:	9b03      	ldr	r3, [sp, #12]
 8003cd6:	3307      	adds	r3, #7
 8003cd8:	f023 0307 	bic.w	r3, r3, #7
 8003cdc:	3308      	adds	r3, #8
 8003cde:	9303      	str	r3, [sp, #12]
 8003ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ce2:	443b      	add	r3, r7
 8003ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ce6:	e767      	b.n	8003bb8 <_vfiprintf_r+0x94>
 8003ce8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003cec:	460c      	mov	r4, r1
 8003cee:	2001      	movs	r0, #1
 8003cf0:	e7a5      	b.n	8003c3e <_vfiprintf_r+0x11a>
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	3401      	adds	r4, #1
 8003cf6:	9305      	str	r3, [sp, #20]
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	f04f 0c0a 	mov.w	ip, #10
 8003cfe:	4620      	mov	r0, r4
 8003d00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d04:	3a30      	subs	r2, #48	; 0x30
 8003d06:	2a09      	cmp	r2, #9
 8003d08:	d903      	bls.n	8003d12 <_vfiprintf_r+0x1ee>
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0c5      	beq.n	8003c9a <_vfiprintf_r+0x176>
 8003d0e:	9105      	str	r1, [sp, #20]
 8003d10:	e7c3      	b.n	8003c9a <_vfiprintf_r+0x176>
 8003d12:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d16:	4604      	mov	r4, r0
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e7f0      	b.n	8003cfe <_vfiprintf_r+0x1da>
 8003d1c:	ab03      	add	r3, sp, #12
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	462a      	mov	r2, r5
 8003d22:	4b16      	ldr	r3, [pc, #88]	; (8003d7c <_vfiprintf_r+0x258>)
 8003d24:	a904      	add	r1, sp, #16
 8003d26:	4630      	mov	r0, r6
 8003d28:	f3af 8000 	nop.w
 8003d2c:	4607      	mov	r7, r0
 8003d2e:	1c78      	adds	r0, r7, #1
 8003d30:	d1d6      	bne.n	8003ce0 <_vfiprintf_r+0x1bc>
 8003d32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d34:	07d9      	lsls	r1, r3, #31
 8003d36:	d405      	bmi.n	8003d44 <_vfiprintf_r+0x220>
 8003d38:	89ab      	ldrh	r3, [r5, #12]
 8003d3a:	059a      	lsls	r2, r3, #22
 8003d3c:	d402      	bmi.n	8003d44 <_vfiprintf_r+0x220>
 8003d3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d40:	f7ff fe6b 	bl	8003a1a <__retarget_lock_release_recursive>
 8003d44:	89ab      	ldrh	r3, [r5, #12]
 8003d46:	065b      	lsls	r3, r3, #25
 8003d48:	f53f af12 	bmi.w	8003b70 <_vfiprintf_r+0x4c>
 8003d4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d4e:	e711      	b.n	8003b74 <_vfiprintf_r+0x50>
 8003d50:	ab03      	add	r3, sp, #12
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	462a      	mov	r2, r5
 8003d56:	4b09      	ldr	r3, [pc, #36]	; (8003d7c <_vfiprintf_r+0x258>)
 8003d58:	a904      	add	r1, sp, #16
 8003d5a:	4630      	mov	r0, r6
 8003d5c:	f000 f880 	bl	8003e60 <_printf_i>
 8003d60:	e7e4      	b.n	8003d2c <_vfiprintf_r+0x208>
 8003d62:	bf00      	nop
 8003d64:	0800478c 	.word	0x0800478c
 8003d68:	080047ac 	.word	0x080047ac
 8003d6c:	0800476c 	.word	0x0800476c
 8003d70:	080047cc 	.word	0x080047cc
 8003d74:	080047d6 	.word	0x080047d6
 8003d78:	00000000 	.word	0x00000000
 8003d7c:	08003aff 	.word	0x08003aff
 8003d80:	080047d2 	.word	0x080047d2

08003d84 <_printf_common>:
 8003d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d88:	4616      	mov	r6, r2
 8003d8a:	4699      	mov	r9, r3
 8003d8c:	688a      	ldr	r2, [r1, #8]
 8003d8e:	690b      	ldr	r3, [r1, #16]
 8003d90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d94:	4293      	cmp	r3, r2
 8003d96:	bfb8      	it	lt
 8003d98:	4613      	movlt	r3, r2
 8003d9a:	6033      	str	r3, [r6, #0]
 8003d9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003da0:	4607      	mov	r7, r0
 8003da2:	460c      	mov	r4, r1
 8003da4:	b10a      	cbz	r2, 8003daa <_printf_common+0x26>
 8003da6:	3301      	adds	r3, #1
 8003da8:	6033      	str	r3, [r6, #0]
 8003daa:	6823      	ldr	r3, [r4, #0]
 8003dac:	0699      	lsls	r1, r3, #26
 8003dae:	bf42      	ittt	mi
 8003db0:	6833      	ldrmi	r3, [r6, #0]
 8003db2:	3302      	addmi	r3, #2
 8003db4:	6033      	strmi	r3, [r6, #0]
 8003db6:	6825      	ldr	r5, [r4, #0]
 8003db8:	f015 0506 	ands.w	r5, r5, #6
 8003dbc:	d106      	bne.n	8003dcc <_printf_common+0x48>
 8003dbe:	f104 0a19 	add.w	sl, r4, #25
 8003dc2:	68e3      	ldr	r3, [r4, #12]
 8003dc4:	6832      	ldr	r2, [r6, #0]
 8003dc6:	1a9b      	subs	r3, r3, r2
 8003dc8:	42ab      	cmp	r3, r5
 8003dca:	dc26      	bgt.n	8003e1a <_printf_common+0x96>
 8003dcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003dd0:	1e13      	subs	r3, r2, #0
 8003dd2:	6822      	ldr	r2, [r4, #0]
 8003dd4:	bf18      	it	ne
 8003dd6:	2301      	movne	r3, #1
 8003dd8:	0692      	lsls	r2, r2, #26
 8003dda:	d42b      	bmi.n	8003e34 <_printf_common+0xb0>
 8003ddc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003de0:	4649      	mov	r1, r9
 8003de2:	4638      	mov	r0, r7
 8003de4:	47c0      	blx	r8
 8003de6:	3001      	adds	r0, #1
 8003de8:	d01e      	beq.n	8003e28 <_printf_common+0xa4>
 8003dea:	6823      	ldr	r3, [r4, #0]
 8003dec:	68e5      	ldr	r5, [r4, #12]
 8003dee:	6832      	ldr	r2, [r6, #0]
 8003df0:	f003 0306 	and.w	r3, r3, #6
 8003df4:	2b04      	cmp	r3, #4
 8003df6:	bf08      	it	eq
 8003df8:	1aad      	subeq	r5, r5, r2
 8003dfa:	68a3      	ldr	r3, [r4, #8]
 8003dfc:	6922      	ldr	r2, [r4, #16]
 8003dfe:	bf0c      	ite	eq
 8003e00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e04:	2500      	movne	r5, #0
 8003e06:	4293      	cmp	r3, r2
 8003e08:	bfc4      	itt	gt
 8003e0a:	1a9b      	subgt	r3, r3, r2
 8003e0c:	18ed      	addgt	r5, r5, r3
 8003e0e:	2600      	movs	r6, #0
 8003e10:	341a      	adds	r4, #26
 8003e12:	42b5      	cmp	r5, r6
 8003e14:	d11a      	bne.n	8003e4c <_printf_common+0xc8>
 8003e16:	2000      	movs	r0, #0
 8003e18:	e008      	b.n	8003e2c <_printf_common+0xa8>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	4652      	mov	r2, sl
 8003e1e:	4649      	mov	r1, r9
 8003e20:	4638      	mov	r0, r7
 8003e22:	47c0      	blx	r8
 8003e24:	3001      	adds	r0, #1
 8003e26:	d103      	bne.n	8003e30 <_printf_common+0xac>
 8003e28:	f04f 30ff 	mov.w	r0, #4294967295
 8003e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e30:	3501      	adds	r5, #1
 8003e32:	e7c6      	b.n	8003dc2 <_printf_common+0x3e>
 8003e34:	18e1      	adds	r1, r4, r3
 8003e36:	1c5a      	adds	r2, r3, #1
 8003e38:	2030      	movs	r0, #48	; 0x30
 8003e3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e3e:	4422      	add	r2, r4
 8003e40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e48:	3302      	adds	r3, #2
 8003e4a:	e7c7      	b.n	8003ddc <_printf_common+0x58>
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	4622      	mov	r2, r4
 8003e50:	4649      	mov	r1, r9
 8003e52:	4638      	mov	r0, r7
 8003e54:	47c0      	blx	r8
 8003e56:	3001      	adds	r0, #1
 8003e58:	d0e6      	beq.n	8003e28 <_printf_common+0xa4>
 8003e5a:	3601      	adds	r6, #1
 8003e5c:	e7d9      	b.n	8003e12 <_printf_common+0x8e>
	...

08003e60 <_printf_i>:
 8003e60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e64:	460c      	mov	r4, r1
 8003e66:	4691      	mov	r9, r2
 8003e68:	7e27      	ldrb	r7, [r4, #24]
 8003e6a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003e6c:	2f78      	cmp	r7, #120	; 0x78
 8003e6e:	4680      	mov	r8, r0
 8003e70:	469a      	mov	sl, r3
 8003e72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e76:	d807      	bhi.n	8003e88 <_printf_i+0x28>
 8003e78:	2f62      	cmp	r7, #98	; 0x62
 8003e7a:	d80a      	bhi.n	8003e92 <_printf_i+0x32>
 8003e7c:	2f00      	cmp	r7, #0
 8003e7e:	f000 80d8 	beq.w	8004032 <_printf_i+0x1d2>
 8003e82:	2f58      	cmp	r7, #88	; 0x58
 8003e84:	f000 80a3 	beq.w	8003fce <_printf_i+0x16e>
 8003e88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003e8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e90:	e03a      	b.n	8003f08 <_printf_i+0xa8>
 8003e92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e96:	2b15      	cmp	r3, #21
 8003e98:	d8f6      	bhi.n	8003e88 <_printf_i+0x28>
 8003e9a:	a001      	add	r0, pc, #4	; (adr r0, 8003ea0 <_printf_i+0x40>)
 8003e9c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003ea0:	08003ef9 	.word	0x08003ef9
 8003ea4:	08003f0d 	.word	0x08003f0d
 8003ea8:	08003e89 	.word	0x08003e89
 8003eac:	08003e89 	.word	0x08003e89
 8003eb0:	08003e89 	.word	0x08003e89
 8003eb4:	08003e89 	.word	0x08003e89
 8003eb8:	08003f0d 	.word	0x08003f0d
 8003ebc:	08003e89 	.word	0x08003e89
 8003ec0:	08003e89 	.word	0x08003e89
 8003ec4:	08003e89 	.word	0x08003e89
 8003ec8:	08003e89 	.word	0x08003e89
 8003ecc:	08004019 	.word	0x08004019
 8003ed0:	08003f3d 	.word	0x08003f3d
 8003ed4:	08003ffb 	.word	0x08003ffb
 8003ed8:	08003e89 	.word	0x08003e89
 8003edc:	08003e89 	.word	0x08003e89
 8003ee0:	0800403b 	.word	0x0800403b
 8003ee4:	08003e89 	.word	0x08003e89
 8003ee8:	08003f3d 	.word	0x08003f3d
 8003eec:	08003e89 	.word	0x08003e89
 8003ef0:	08003e89 	.word	0x08003e89
 8003ef4:	08004003 	.word	0x08004003
 8003ef8:	680b      	ldr	r3, [r1, #0]
 8003efa:	1d1a      	adds	r2, r3, #4
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	600a      	str	r2, [r1, #0]
 8003f00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e0a3      	b.n	8004054 <_printf_i+0x1f4>
 8003f0c:	6825      	ldr	r5, [r4, #0]
 8003f0e:	6808      	ldr	r0, [r1, #0]
 8003f10:	062e      	lsls	r6, r5, #24
 8003f12:	f100 0304 	add.w	r3, r0, #4
 8003f16:	d50a      	bpl.n	8003f2e <_printf_i+0xce>
 8003f18:	6805      	ldr	r5, [r0, #0]
 8003f1a:	600b      	str	r3, [r1, #0]
 8003f1c:	2d00      	cmp	r5, #0
 8003f1e:	da03      	bge.n	8003f28 <_printf_i+0xc8>
 8003f20:	232d      	movs	r3, #45	; 0x2d
 8003f22:	426d      	negs	r5, r5
 8003f24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f28:	485e      	ldr	r0, [pc, #376]	; (80040a4 <_printf_i+0x244>)
 8003f2a:	230a      	movs	r3, #10
 8003f2c:	e019      	b.n	8003f62 <_printf_i+0x102>
 8003f2e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003f32:	6805      	ldr	r5, [r0, #0]
 8003f34:	600b      	str	r3, [r1, #0]
 8003f36:	bf18      	it	ne
 8003f38:	b22d      	sxthne	r5, r5
 8003f3a:	e7ef      	b.n	8003f1c <_printf_i+0xbc>
 8003f3c:	680b      	ldr	r3, [r1, #0]
 8003f3e:	6825      	ldr	r5, [r4, #0]
 8003f40:	1d18      	adds	r0, r3, #4
 8003f42:	6008      	str	r0, [r1, #0]
 8003f44:	0628      	lsls	r0, r5, #24
 8003f46:	d501      	bpl.n	8003f4c <_printf_i+0xec>
 8003f48:	681d      	ldr	r5, [r3, #0]
 8003f4a:	e002      	b.n	8003f52 <_printf_i+0xf2>
 8003f4c:	0669      	lsls	r1, r5, #25
 8003f4e:	d5fb      	bpl.n	8003f48 <_printf_i+0xe8>
 8003f50:	881d      	ldrh	r5, [r3, #0]
 8003f52:	4854      	ldr	r0, [pc, #336]	; (80040a4 <_printf_i+0x244>)
 8003f54:	2f6f      	cmp	r7, #111	; 0x6f
 8003f56:	bf0c      	ite	eq
 8003f58:	2308      	moveq	r3, #8
 8003f5a:	230a      	movne	r3, #10
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f62:	6866      	ldr	r6, [r4, #4]
 8003f64:	60a6      	str	r6, [r4, #8]
 8003f66:	2e00      	cmp	r6, #0
 8003f68:	bfa2      	ittt	ge
 8003f6a:	6821      	ldrge	r1, [r4, #0]
 8003f6c:	f021 0104 	bicge.w	r1, r1, #4
 8003f70:	6021      	strge	r1, [r4, #0]
 8003f72:	b90d      	cbnz	r5, 8003f78 <_printf_i+0x118>
 8003f74:	2e00      	cmp	r6, #0
 8003f76:	d04d      	beq.n	8004014 <_printf_i+0x1b4>
 8003f78:	4616      	mov	r6, r2
 8003f7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f7e:	fb03 5711 	mls	r7, r3, r1, r5
 8003f82:	5dc7      	ldrb	r7, [r0, r7]
 8003f84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f88:	462f      	mov	r7, r5
 8003f8a:	42bb      	cmp	r3, r7
 8003f8c:	460d      	mov	r5, r1
 8003f8e:	d9f4      	bls.n	8003f7a <_printf_i+0x11a>
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d10b      	bne.n	8003fac <_printf_i+0x14c>
 8003f94:	6823      	ldr	r3, [r4, #0]
 8003f96:	07df      	lsls	r7, r3, #31
 8003f98:	d508      	bpl.n	8003fac <_printf_i+0x14c>
 8003f9a:	6923      	ldr	r3, [r4, #16]
 8003f9c:	6861      	ldr	r1, [r4, #4]
 8003f9e:	4299      	cmp	r1, r3
 8003fa0:	bfde      	ittt	le
 8003fa2:	2330      	movle	r3, #48	; 0x30
 8003fa4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003fa8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003fac:	1b92      	subs	r2, r2, r6
 8003fae:	6122      	str	r2, [r4, #16]
 8003fb0:	f8cd a000 	str.w	sl, [sp]
 8003fb4:	464b      	mov	r3, r9
 8003fb6:	aa03      	add	r2, sp, #12
 8003fb8:	4621      	mov	r1, r4
 8003fba:	4640      	mov	r0, r8
 8003fbc:	f7ff fee2 	bl	8003d84 <_printf_common>
 8003fc0:	3001      	adds	r0, #1
 8003fc2:	d14c      	bne.n	800405e <_printf_i+0x1fe>
 8003fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc8:	b004      	add	sp, #16
 8003fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fce:	4835      	ldr	r0, [pc, #212]	; (80040a4 <_printf_i+0x244>)
 8003fd0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003fd4:	6823      	ldr	r3, [r4, #0]
 8003fd6:	680e      	ldr	r6, [r1, #0]
 8003fd8:	061f      	lsls	r7, r3, #24
 8003fda:	f856 5b04 	ldr.w	r5, [r6], #4
 8003fde:	600e      	str	r6, [r1, #0]
 8003fe0:	d514      	bpl.n	800400c <_printf_i+0x1ac>
 8003fe2:	07d9      	lsls	r1, r3, #31
 8003fe4:	bf44      	itt	mi
 8003fe6:	f043 0320 	orrmi.w	r3, r3, #32
 8003fea:	6023      	strmi	r3, [r4, #0]
 8003fec:	b91d      	cbnz	r5, 8003ff6 <_printf_i+0x196>
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	f023 0320 	bic.w	r3, r3, #32
 8003ff4:	6023      	str	r3, [r4, #0]
 8003ff6:	2310      	movs	r3, #16
 8003ff8:	e7b0      	b.n	8003f5c <_printf_i+0xfc>
 8003ffa:	6823      	ldr	r3, [r4, #0]
 8003ffc:	f043 0320 	orr.w	r3, r3, #32
 8004000:	6023      	str	r3, [r4, #0]
 8004002:	2378      	movs	r3, #120	; 0x78
 8004004:	4828      	ldr	r0, [pc, #160]	; (80040a8 <_printf_i+0x248>)
 8004006:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800400a:	e7e3      	b.n	8003fd4 <_printf_i+0x174>
 800400c:	065e      	lsls	r6, r3, #25
 800400e:	bf48      	it	mi
 8004010:	b2ad      	uxthmi	r5, r5
 8004012:	e7e6      	b.n	8003fe2 <_printf_i+0x182>
 8004014:	4616      	mov	r6, r2
 8004016:	e7bb      	b.n	8003f90 <_printf_i+0x130>
 8004018:	680b      	ldr	r3, [r1, #0]
 800401a:	6826      	ldr	r6, [r4, #0]
 800401c:	6960      	ldr	r0, [r4, #20]
 800401e:	1d1d      	adds	r5, r3, #4
 8004020:	600d      	str	r5, [r1, #0]
 8004022:	0635      	lsls	r5, r6, #24
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	d501      	bpl.n	800402c <_printf_i+0x1cc>
 8004028:	6018      	str	r0, [r3, #0]
 800402a:	e002      	b.n	8004032 <_printf_i+0x1d2>
 800402c:	0671      	lsls	r1, r6, #25
 800402e:	d5fb      	bpl.n	8004028 <_printf_i+0x1c8>
 8004030:	8018      	strh	r0, [r3, #0]
 8004032:	2300      	movs	r3, #0
 8004034:	6123      	str	r3, [r4, #16]
 8004036:	4616      	mov	r6, r2
 8004038:	e7ba      	b.n	8003fb0 <_printf_i+0x150>
 800403a:	680b      	ldr	r3, [r1, #0]
 800403c:	1d1a      	adds	r2, r3, #4
 800403e:	600a      	str	r2, [r1, #0]
 8004040:	681e      	ldr	r6, [r3, #0]
 8004042:	6862      	ldr	r2, [r4, #4]
 8004044:	2100      	movs	r1, #0
 8004046:	4630      	mov	r0, r6
 8004048:	f7fc f8ea 	bl	8000220 <memchr>
 800404c:	b108      	cbz	r0, 8004052 <_printf_i+0x1f2>
 800404e:	1b80      	subs	r0, r0, r6
 8004050:	6060      	str	r0, [r4, #4]
 8004052:	6863      	ldr	r3, [r4, #4]
 8004054:	6123      	str	r3, [r4, #16]
 8004056:	2300      	movs	r3, #0
 8004058:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800405c:	e7a8      	b.n	8003fb0 <_printf_i+0x150>
 800405e:	6923      	ldr	r3, [r4, #16]
 8004060:	4632      	mov	r2, r6
 8004062:	4649      	mov	r1, r9
 8004064:	4640      	mov	r0, r8
 8004066:	47d0      	blx	sl
 8004068:	3001      	adds	r0, #1
 800406a:	d0ab      	beq.n	8003fc4 <_printf_i+0x164>
 800406c:	6823      	ldr	r3, [r4, #0]
 800406e:	079b      	lsls	r3, r3, #30
 8004070:	d413      	bmi.n	800409a <_printf_i+0x23a>
 8004072:	68e0      	ldr	r0, [r4, #12]
 8004074:	9b03      	ldr	r3, [sp, #12]
 8004076:	4298      	cmp	r0, r3
 8004078:	bfb8      	it	lt
 800407a:	4618      	movlt	r0, r3
 800407c:	e7a4      	b.n	8003fc8 <_printf_i+0x168>
 800407e:	2301      	movs	r3, #1
 8004080:	4632      	mov	r2, r6
 8004082:	4649      	mov	r1, r9
 8004084:	4640      	mov	r0, r8
 8004086:	47d0      	blx	sl
 8004088:	3001      	adds	r0, #1
 800408a:	d09b      	beq.n	8003fc4 <_printf_i+0x164>
 800408c:	3501      	adds	r5, #1
 800408e:	68e3      	ldr	r3, [r4, #12]
 8004090:	9903      	ldr	r1, [sp, #12]
 8004092:	1a5b      	subs	r3, r3, r1
 8004094:	42ab      	cmp	r3, r5
 8004096:	dcf2      	bgt.n	800407e <_printf_i+0x21e>
 8004098:	e7eb      	b.n	8004072 <_printf_i+0x212>
 800409a:	2500      	movs	r5, #0
 800409c:	f104 0619 	add.w	r6, r4, #25
 80040a0:	e7f5      	b.n	800408e <_printf_i+0x22e>
 80040a2:	bf00      	nop
 80040a4:	080047dd 	.word	0x080047dd
 80040a8:	080047ee 	.word	0x080047ee

080040ac <_sbrk_r>:
 80040ac:	b538      	push	{r3, r4, r5, lr}
 80040ae:	4d06      	ldr	r5, [pc, #24]	; (80040c8 <_sbrk_r+0x1c>)
 80040b0:	2300      	movs	r3, #0
 80040b2:	4604      	mov	r4, r0
 80040b4:	4608      	mov	r0, r1
 80040b6:	602b      	str	r3, [r5, #0]
 80040b8:	f7fc fdc0 	bl	8000c3c <_sbrk>
 80040bc:	1c43      	adds	r3, r0, #1
 80040be:	d102      	bne.n	80040c6 <_sbrk_r+0x1a>
 80040c0:	682b      	ldr	r3, [r5, #0]
 80040c2:	b103      	cbz	r3, 80040c6 <_sbrk_r+0x1a>
 80040c4:	6023      	str	r3, [r4, #0]
 80040c6:	bd38      	pop	{r3, r4, r5, pc}
 80040c8:	200001b0 	.word	0x200001b0

080040cc <__sread>:
 80040cc:	b510      	push	{r4, lr}
 80040ce:	460c      	mov	r4, r1
 80040d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040d4:	f000 fab4 	bl	8004640 <_read_r>
 80040d8:	2800      	cmp	r0, #0
 80040da:	bfab      	itete	ge
 80040dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80040de:	89a3      	ldrhlt	r3, [r4, #12]
 80040e0:	181b      	addge	r3, r3, r0
 80040e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80040e6:	bfac      	ite	ge
 80040e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80040ea:	81a3      	strhlt	r3, [r4, #12]
 80040ec:	bd10      	pop	{r4, pc}

080040ee <__swrite>:
 80040ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040f2:	461f      	mov	r7, r3
 80040f4:	898b      	ldrh	r3, [r1, #12]
 80040f6:	05db      	lsls	r3, r3, #23
 80040f8:	4605      	mov	r5, r0
 80040fa:	460c      	mov	r4, r1
 80040fc:	4616      	mov	r6, r2
 80040fe:	d505      	bpl.n	800410c <__swrite+0x1e>
 8004100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004104:	2302      	movs	r3, #2
 8004106:	2200      	movs	r2, #0
 8004108:	f000 f9c8 	bl	800449c <_lseek_r>
 800410c:	89a3      	ldrh	r3, [r4, #12]
 800410e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004112:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004116:	81a3      	strh	r3, [r4, #12]
 8004118:	4632      	mov	r2, r6
 800411a:	463b      	mov	r3, r7
 800411c:	4628      	mov	r0, r5
 800411e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004122:	f000 b869 	b.w	80041f8 <_write_r>

08004126 <__sseek>:
 8004126:	b510      	push	{r4, lr}
 8004128:	460c      	mov	r4, r1
 800412a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800412e:	f000 f9b5 	bl	800449c <_lseek_r>
 8004132:	1c43      	adds	r3, r0, #1
 8004134:	89a3      	ldrh	r3, [r4, #12]
 8004136:	bf15      	itete	ne
 8004138:	6560      	strne	r0, [r4, #84]	; 0x54
 800413a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800413e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004142:	81a3      	strheq	r3, [r4, #12]
 8004144:	bf18      	it	ne
 8004146:	81a3      	strhne	r3, [r4, #12]
 8004148:	bd10      	pop	{r4, pc}

0800414a <__sclose>:
 800414a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800414e:	f000 b8d3 	b.w	80042f8 <_close_r>
	...

08004154 <__swbuf_r>:
 8004154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004156:	460e      	mov	r6, r1
 8004158:	4614      	mov	r4, r2
 800415a:	4605      	mov	r5, r0
 800415c:	b118      	cbz	r0, 8004166 <__swbuf_r+0x12>
 800415e:	6983      	ldr	r3, [r0, #24]
 8004160:	b90b      	cbnz	r3, 8004166 <__swbuf_r+0x12>
 8004162:	f7ff fbbb 	bl	80038dc <__sinit>
 8004166:	4b21      	ldr	r3, [pc, #132]	; (80041ec <__swbuf_r+0x98>)
 8004168:	429c      	cmp	r4, r3
 800416a:	d12b      	bne.n	80041c4 <__swbuf_r+0x70>
 800416c:	686c      	ldr	r4, [r5, #4]
 800416e:	69a3      	ldr	r3, [r4, #24]
 8004170:	60a3      	str	r3, [r4, #8]
 8004172:	89a3      	ldrh	r3, [r4, #12]
 8004174:	071a      	lsls	r2, r3, #28
 8004176:	d52f      	bpl.n	80041d8 <__swbuf_r+0x84>
 8004178:	6923      	ldr	r3, [r4, #16]
 800417a:	b36b      	cbz	r3, 80041d8 <__swbuf_r+0x84>
 800417c:	6923      	ldr	r3, [r4, #16]
 800417e:	6820      	ldr	r0, [r4, #0]
 8004180:	1ac0      	subs	r0, r0, r3
 8004182:	6963      	ldr	r3, [r4, #20]
 8004184:	b2f6      	uxtb	r6, r6
 8004186:	4283      	cmp	r3, r0
 8004188:	4637      	mov	r7, r6
 800418a:	dc04      	bgt.n	8004196 <__swbuf_r+0x42>
 800418c:	4621      	mov	r1, r4
 800418e:	4628      	mov	r0, r5
 8004190:	f000 f948 	bl	8004424 <_fflush_r>
 8004194:	bb30      	cbnz	r0, 80041e4 <__swbuf_r+0x90>
 8004196:	68a3      	ldr	r3, [r4, #8]
 8004198:	3b01      	subs	r3, #1
 800419a:	60a3      	str	r3, [r4, #8]
 800419c:	6823      	ldr	r3, [r4, #0]
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	6022      	str	r2, [r4, #0]
 80041a2:	701e      	strb	r6, [r3, #0]
 80041a4:	6963      	ldr	r3, [r4, #20]
 80041a6:	3001      	adds	r0, #1
 80041a8:	4283      	cmp	r3, r0
 80041aa:	d004      	beq.n	80041b6 <__swbuf_r+0x62>
 80041ac:	89a3      	ldrh	r3, [r4, #12]
 80041ae:	07db      	lsls	r3, r3, #31
 80041b0:	d506      	bpl.n	80041c0 <__swbuf_r+0x6c>
 80041b2:	2e0a      	cmp	r6, #10
 80041b4:	d104      	bne.n	80041c0 <__swbuf_r+0x6c>
 80041b6:	4621      	mov	r1, r4
 80041b8:	4628      	mov	r0, r5
 80041ba:	f000 f933 	bl	8004424 <_fflush_r>
 80041be:	b988      	cbnz	r0, 80041e4 <__swbuf_r+0x90>
 80041c0:	4638      	mov	r0, r7
 80041c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041c4:	4b0a      	ldr	r3, [pc, #40]	; (80041f0 <__swbuf_r+0x9c>)
 80041c6:	429c      	cmp	r4, r3
 80041c8:	d101      	bne.n	80041ce <__swbuf_r+0x7a>
 80041ca:	68ac      	ldr	r4, [r5, #8]
 80041cc:	e7cf      	b.n	800416e <__swbuf_r+0x1a>
 80041ce:	4b09      	ldr	r3, [pc, #36]	; (80041f4 <__swbuf_r+0xa0>)
 80041d0:	429c      	cmp	r4, r3
 80041d2:	bf08      	it	eq
 80041d4:	68ec      	ldreq	r4, [r5, #12]
 80041d6:	e7ca      	b.n	800416e <__swbuf_r+0x1a>
 80041d8:	4621      	mov	r1, r4
 80041da:	4628      	mov	r0, r5
 80041dc:	f000 f81e 	bl	800421c <__swsetup_r>
 80041e0:	2800      	cmp	r0, #0
 80041e2:	d0cb      	beq.n	800417c <__swbuf_r+0x28>
 80041e4:	f04f 37ff 	mov.w	r7, #4294967295
 80041e8:	e7ea      	b.n	80041c0 <__swbuf_r+0x6c>
 80041ea:	bf00      	nop
 80041ec:	0800478c 	.word	0x0800478c
 80041f0:	080047ac 	.word	0x080047ac
 80041f4:	0800476c 	.word	0x0800476c

080041f8 <_write_r>:
 80041f8:	b538      	push	{r3, r4, r5, lr}
 80041fa:	4d07      	ldr	r5, [pc, #28]	; (8004218 <_write_r+0x20>)
 80041fc:	4604      	mov	r4, r0
 80041fe:	4608      	mov	r0, r1
 8004200:	4611      	mov	r1, r2
 8004202:	2200      	movs	r2, #0
 8004204:	602a      	str	r2, [r5, #0]
 8004206:	461a      	mov	r2, r3
 8004208:	f7fc fbee 	bl	80009e8 <_write>
 800420c:	1c43      	adds	r3, r0, #1
 800420e:	d102      	bne.n	8004216 <_write_r+0x1e>
 8004210:	682b      	ldr	r3, [r5, #0]
 8004212:	b103      	cbz	r3, 8004216 <_write_r+0x1e>
 8004214:	6023      	str	r3, [r4, #0]
 8004216:	bd38      	pop	{r3, r4, r5, pc}
 8004218:	200001b0 	.word	0x200001b0

0800421c <__swsetup_r>:
 800421c:	4b32      	ldr	r3, [pc, #200]	; (80042e8 <__swsetup_r+0xcc>)
 800421e:	b570      	push	{r4, r5, r6, lr}
 8004220:	681d      	ldr	r5, [r3, #0]
 8004222:	4606      	mov	r6, r0
 8004224:	460c      	mov	r4, r1
 8004226:	b125      	cbz	r5, 8004232 <__swsetup_r+0x16>
 8004228:	69ab      	ldr	r3, [r5, #24]
 800422a:	b913      	cbnz	r3, 8004232 <__swsetup_r+0x16>
 800422c:	4628      	mov	r0, r5
 800422e:	f7ff fb55 	bl	80038dc <__sinit>
 8004232:	4b2e      	ldr	r3, [pc, #184]	; (80042ec <__swsetup_r+0xd0>)
 8004234:	429c      	cmp	r4, r3
 8004236:	d10f      	bne.n	8004258 <__swsetup_r+0x3c>
 8004238:	686c      	ldr	r4, [r5, #4]
 800423a:	89a3      	ldrh	r3, [r4, #12]
 800423c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004240:	0719      	lsls	r1, r3, #28
 8004242:	d42c      	bmi.n	800429e <__swsetup_r+0x82>
 8004244:	06dd      	lsls	r5, r3, #27
 8004246:	d411      	bmi.n	800426c <__swsetup_r+0x50>
 8004248:	2309      	movs	r3, #9
 800424a:	6033      	str	r3, [r6, #0]
 800424c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004250:	81a3      	strh	r3, [r4, #12]
 8004252:	f04f 30ff 	mov.w	r0, #4294967295
 8004256:	e03e      	b.n	80042d6 <__swsetup_r+0xba>
 8004258:	4b25      	ldr	r3, [pc, #148]	; (80042f0 <__swsetup_r+0xd4>)
 800425a:	429c      	cmp	r4, r3
 800425c:	d101      	bne.n	8004262 <__swsetup_r+0x46>
 800425e:	68ac      	ldr	r4, [r5, #8]
 8004260:	e7eb      	b.n	800423a <__swsetup_r+0x1e>
 8004262:	4b24      	ldr	r3, [pc, #144]	; (80042f4 <__swsetup_r+0xd8>)
 8004264:	429c      	cmp	r4, r3
 8004266:	bf08      	it	eq
 8004268:	68ec      	ldreq	r4, [r5, #12]
 800426a:	e7e6      	b.n	800423a <__swsetup_r+0x1e>
 800426c:	0758      	lsls	r0, r3, #29
 800426e:	d512      	bpl.n	8004296 <__swsetup_r+0x7a>
 8004270:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004272:	b141      	cbz	r1, 8004286 <__swsetup_r+0x6a>
 8004274:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004278:	4299      	cmp	r1, r3
 800427a:	d002      	beq.n	8004282 <__swsetup_r+0x66>
 800427c:	4630      	mov	r0, r6
 800427e:	f000 f98f 	bl	80045a0 <_free_r>
 8004282:	2300      	movs	r3, #0
 8004284:	6363      	str	r3, [r4, #52]	; 0x34
 8004286:	89a3      	ldrh	r3, [r4, #12]
 8004288:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800428c:	81a3      	strh	r3, [r4, #12]
 800428e:	2300      	movs	r3, #0
 8004290:	6063      	str	r3, [r4, #4]
 8004292:	6923      	ldr	r3, [r4, #16]
 8004294:	6023      	str	r3, [r4, #0]
 8004296:	89a3      	ldrh	r3, [r4, #12]
 8004298:	f043 0308 	orr.w	r3, r3, #8
 800429c:	81a3      	strh	r3, [r4, #12]
 800429e:	6923      	ldr	r3, [r4, #16]
 80042a0:	b94b      	cbnz	r3, 80042b6 <__swsetup_r+0x9a>
 80042a2:	89a3      	ldrh	r3, [r4, #12]
 80042a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80042a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ac:	d003      	beq.n	80042b6 <__swsetup_r+0x9a>
 80042ae:	4621      	mov	r1, r4
 80042b0:	4630      	mov	r0, r6
 80042b2:	f000 f929 	bl	8004508 <__smakebuf_r>
 80042b6:	89a0      	ldrh	r0, [r4, #12]
 80042b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80042bc:	f010 0301 	ands.w	r3, r0, #1
 80042c0:	d00a      	beq.n	80042d8 <__swsetup_r+0xbc>
 80042c2:	2300      	movs	r3, #0
 80042c4:	60a3      	str	r3, [r4, #8]
 80042c6:	6963      	ldr	r3, [r4, #20]
 80042c8:	425b      	negs	r3, r3
 80042ca:	61a3      	str	r3, [r4, #24]
 80042cc:	6923      	ldr	r3, [r4, #16]
 80042ce:	b943      	cbnz	r3, 80042e2 <__swsetup_r+0xc6>
 80042d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80042d4:	d1ba      	bne.n	800424c <__swsetup_r+0x30>
 80042d6:	bd70      	pop	{r4, r5, r6, pc}
 80042d8:	0781      	lsls	r1, r0, #30
 80042da:	bf58      	it	pl
 80042dc:	6963      	ldrpl	r3, [r4, #20]
 80042de:	60a3      	str	r3, [r4, #8]
 80042e0:	e7f4      	b.n	80042cc <__swsetup_r+0xb0>
 80042e2:	2000      	movs	r0, #0
 80042e4:	e7f7      	b.n	80042d6 <__swsetup_r+0xba>
 80042e6:	bf00      	nop
 80042e8:	2000000c 	.word	0x2000000c
 80042ec:	0800478c 	.word	0x0800478c
 80042f0:	080047ac 	.word	0x080047ac
 80042f4:	0800476c 	.word	0x0800476c

080042f8 <_close_r>:
 80042f8:	b538      	push	{r3, r4, r5, lr}
 80042fa:	4d06      	ldr	r5, [pc, #24]	; (8004314 <_close_r+0x1c>)
 80042fc:	2300      	movs	r3, #0
 80042fe:	4604      	mov	r4, r0
 8004300:	4608      	mov	r0, r1
 8004302:	602b      	str	r3, [r5, #0]
 8004304:	f7fc fc65 	bl	8000bd2 <_close>
 8004308:	1c43      	adds	r3, r0, #1
 800430a:	d102      	bne.n	8004312 <_close_r+0x1a>
 800430c:	682b      	ldr	r3, [r5, #0]
 800430e:	b103      	cbz	r3, 8004312 <_close_r+0x1a>
 8004310:	6023      	str	r3, [r4, #0]
 8004312:	bd38      	pop	{r3, r4, r5, pc}
 8004314:	200001b0 	.word	0x200001b0

08004318 <__sflush_r>:
 8004318:	898a      	ldrh	r2, [r1, #12]
 800431a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800431e:	4605      	mov	r5, r0
 8004320:	0710      	lsls	r0, r2, #28
 8004322:	460c      	mov	r4, r1
 8004324:	d458      	bmi.n	80043d8 <__sflush_r+0xc0>
 8004326:	684b      	ldr	r3, [r1, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	dc05      	bgt.n	8004338 <__sflush_r+0x20>
 800432c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800432e:	2b00      	cmp	r3, #0
 8004330:	dc02      	bgt.n	8004338 <__sflush_r+0x20>
 8004332:	2000      	movs	r0, #0
 8004334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004338:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800433a:	2e00      	cmp	r6, #0
 800433c:	d0f9      	beq.n	8004332 <__sflush_r+0x1a>
 800433e:	2300      	movs	r3, #0
 8004340:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004344:	682f      	ldr	r7, [r5, #0]
 8004346:	602b      	str	r3, [r5, #0]
 8004348:	d032      	beq.n	80043b0 <__sflush_r+0x98>
 800434a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800434c:	89a3      	ldrh	r3, [r4, #12]
 800434e:	075a      	lsls	r2, r3, #29
 8004350:	d505      	bpl.n	800435e <__sflush_r+0x46>
 8004352:	6863      	ldr	r3, [r4, #4]
 8004354:	1ac0      	subs	r0, r0, r3
 8004356:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004358:	b10b      	cbz	r3, 800435e <__sflush_r+0x46>
 800435a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800435c:	1ac0      	subs	r0, r0, r3
 800435e:	2300      	movs	r3, #0
 8004360:	4602      	mov	r2, r0
 8004362:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004364:	6a21      	ldr	r1, [r4, #32]
 8004366:	4628      	mov	r0, r5
 8004368:	47b0      	blx	r6
 800436a:	1c43      	adds	r3, r0, #1
 800436c:	89a3      	ldrh	r3, [r4, #12]
 800436e:	d106      	bne.n	800437e <__sflush_r+0x66>
 8004370:	6829      	ldr	r1, [r5, #0]
 8004372:	291d      	cmp	r1, #29
 8004374:	d82c      	bhi.n	80043d0 <__sflush_r+0xb8>
 8004376:	4a2a      	ldr	r2, [pc, #168]	; (8004420 <__sflush_r+0x108>)
 8004378:	40ca      	lsrs	r2, r1
 800437a:	07d6      	lsls	r6, r2, #31
 800437c:	d528      	bpl.n	80043d0 <__sflush_r+0xb8>
 800437e:	2200      	movs	r2, #0
 8004380:	6062      	str	r2, [r4, #4]
 8004382:	04d9      	lsls	r1, r3, #19
 8004384:	6922      	ldr	r2, [r4, #16]
 8004386:	6022      	str	r2, [r4, #0]
 8004388:	d504      	bpl.n	8004394 <__sflush_r+0x7c>
 800438a:	1c42      	adds	r2, r0, #1
 800438c:	d101      	bne.n	8004392 <__sflush_r+0x7a>
 800438e:	682b      	ldr	r3, [r5, #0]
 8004390:	b903      	cbnz	r3, 8004394 <__sflush_r+0x7c>
 8004392:	6560      	str	r0, [r4, #84]	; 0x54
 8004394:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004396:	602f      	str	r7, [r5, #0]
 8004398:	2900      	cmp	r1, #0
 800439a:	d0ca      	beq.n	8004332 <__sflush_r+0x1a>
 800439c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043a0:	4299      	cmp	r1, r3
 80043a2:	d002      	beq.n	80043aa <__sflush_r+0x92>
 80043a4:	4628      	mov	r0, r5
 80043a6:	f000 f8fb 	bl	80045a0 <_free_r>
 80043aa:	2000      	movs	r0, #0
 80043ac:	6360      	str	r0, [r4, #52]	; 0x34
 80043ae:	e7c1      	b.n	8004334 <__sflush_r+0x1c>
 80043b0:	6a21      	ldr	r1, [r4, #32]
 80043b2:	2301      	movs	r3, #1
 80043b4:	4628      	mov	r0, r5
 80043b6:	47b0      	blx	r6
 80043b8:	1c41      	adds	r1, r0, #1
 80043ba:	d1c7      	bne.n	800434c <__sflush_r+0x34>
 80043bc:	682b      	ldr	r3, [r5, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0c4      	beq.n	800434c <__sflush_r+0x34>
 80043c2:	2b1d      	cmp	r3, #29
 80043c4:	d001      	beq.n	80043ca <__sflush_r+0xb2>
 80043c6:	2b16      	cmp	r3, #22
 80043c8:	d101      	bne.n	80043ce <__sflush_r+0xb6>
 80043ca:	602f      	str	r7, [r5, #0]
 80043cc:	e7b1      	b.n	8004332 <__sflush_r+0x1a>
 80043ce:	89a3      	ldrh	r3, [r4, #12]
 80043d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043d4:	81a3      	strh	r3, [r4, #12]
 80043d6:	e7ad      	b.n	8004334 <__sflush_r+0x1c>
 80043d8:	690f      	ldr	r7, [r1, #16]
 80043da:	2f00      	cmp	r7, #0
 80043dc:	d0a9      	beq.n	8004332 <__sflush_r+0x1a>
 80043de:	0793      	lsls	r3, r2, #30
 80043e0:	680e      	ldr	r6, [r1, #0]
 80043e2:	bf08      	it	eq
 80043e4:	694b      	ldreq	r3, [r1, #20]
 80043e6:	600f      	str	r7, [r1, #0]
 80043e8:	bf18      	it	ne
 80043ea:	2300      	movne	r3, #0
 80043ec:	eba6 0807 	sub.w	r8, r6, r7
 80043f0:	608b      	str	r3, [r1, #8]
 80043f2:	f1b8 0f00 	cmp.w	r8, #0
 80043f6:	dd9c      	ble.n	8004332 <__sflush_r+0x1a>
 80043f8:	6a21      	ldr	r1, [r4, #32]
 80043fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80043fc:	4643      	mov	r3, r8
 80043fe:	463a      	mov	r2, r7
 8004400:	4628      	mov	r0, r5
 8004402:	47b0      	blx	r6
 8004404:	2800      	cmp	r0, #0
 8004406:	dc06      	bgt.n	8004416 <__sflush_r+0xfe>
 8004408:	89a3      	ldrh	r3, [r4, #12]
 800440a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800440e:	81a3      	strh	r3, [r4, #12]
 8004410:	f04f 30ff 	mov.w	r0, #4294967295
 8004414:	e78e      	b.n	8004334 <__sflush_r+0x1c>
 8004416:	4407      	add	r7, r0
 8004418:	eba8 0800 	sub.w	r8, r8, r0
 800441c:	e7e9      	b.n	80043f2 <__sflush_r+0xda>
 800441e:	bf00      	nop
 8004420:	20400001 	.word	0x20400001

08004424 <_fflush_r>:
 8004424:	b538      	push	{r3, r4, r5, lr}
 8004426:	690b      	ldr	r3, [r1, #16]
 8004428:	4605      	mov	r5, r0
 800442a:	460c      	mov	r4, r1
 800442c:	b913      	cbnz	r3, 8004434 <_fflush_r+0x10>
 800442e:	2500      	movs	r5, #0
 8004430:	4628      	mov	r0, r5
 8004432:	bd38      	pop	{r3, r4, r5, pc}
 8004434:	b118      	cbz	r0, 800443e <_fflush_r+0x1a>
 8004436:	6983      	ldr	r3, [r0, #24]
 8004438:	b90b      	cbnz	r3, 800443e <_fflush_r+0x1a>
 800443a:	f7ff fa4f 	bl	80038dc <__sinit>
 800443e:	4b14      	ldr	r3, [pc, #80]	; (8004490 <_fflush_r+0x6c>)
 8004440:	429c      	cmp	r4, r3
 8004442:	d11b      	bne.n	800447c <_fflush_r+0x58>
 8004444:	686c      	ldr	r4, [r5, #4]
 8004446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0ef      	beq.n	800442e <_fflush_r+0xa>
 800444e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004450:	07d0      	lsls	r0, r2, #31
 8004452:	d404      	bmi.n	800445e <_fflush_r+0x3a>
 8004454:	0599      	lsls	r1, r3, #22
 8004456:	d402      	bmi.n	800445e <_fflush_r+0x3a>
 8004458:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800445a:	f7ff fadd 	bl	8003a18 <__retarget_lock_acquire_recursive>
 800445e:	4628      	mov	r0, r5
 8004460:	4621      	mov	r1, r4
 8004462:	f7ff ff59 	bl	8004318 <__sflush_r>
 8004466:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004468:	07da      	lsls	r2, r3, #31
 800446a:	4605      	mov	r5, r0
 800446c:	d4e0      	bmi.n	8004430 <_fflush_r+0xc>
 800446e:	89a3      	ldrh	r3, [r4, #12]
 8004470:	059b      	lsls	r3, r3, #22
 8004472:	d4dd      	bmi.n	8004430 <_fflush_r+0xc>
 8004474:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004476:	f7ff fad0 	bl	8003a1a <__retarget_lock_release_recursive>
 800447a:	e7d9      	b.n	8004430 <_fflush_r+0xc>
 800447c:	4b05      	ldr	r3, [pc, #20]	; (8004494 <_fflush_r+0x70>)
 800447e:	429c      	cmp	r4, r3
 8004480:	d101      	bne.n	8004486 <_fflush_r+0x62>
 8004482:	68ac      	ldr	r4, [r5, #8]
 8004484:	e7df      	b.n	8004446 <_fflush_r+0x22>
 8004486:	4b04      	ldr	r3, [pc, #16]	; (8004498 <_fflush_r+0x74>)
 8004488:	429c      	cmp	r4, r3
 800448a:	bf08      	it	eq
 800448c:	68ec      	ldreq	r4, [r5, #12]
 800448e:	e7da      	b.n	8004446 <_fflush_r+0x22>
 8004490:	0800478c 	.word	0x0800478c
 8004494:	080047ac 	.word	0x080047ac
 8004498:	0800476c 	.word	0x0800476c

0800449c <_lseek_r>:
 800449c:	b538      	push	{r3, r4, r5, lr}
 800449e:	4d07      	ldr	r5, [pc, #28]	; (80044bc <_lseek_r+0x20>)
 80044a0:	4604      	mov	r4, r0
 80044a2:	4608      	mov	r0, r1
 80044a4:	4611      	mov	r1, r2
 80044a6:	2200      	movs	r2, #0
 80044a8:	602a      	str	r2, [r5, #0]
 80044aa:	461a      	mov	r2, r3
 80044ac:	f7fc fbb8 	bl	8000c20 <_lseek>
 80044b0:	1c43      	adds	r3, r0, #1
 80044b2:	d102      	bne.n	80044ba <_lseek_r+0x1e>
 80044b4:	682b      	ldr	r3, [r5, #0]
 80044b6:	b103      	cbz	r3, 80044ba <_lseek_r+0x1e>
 80044b8:	6023      	str	r3, [r4, #0]
 80044ba:	bd38      	pop	{r3, r4, r5, pc}
 80044bc:	200001b0 	.word	0x200001b0

080044c0 <__swhatbuf_r>:
 80044c0:	b570      	push	{r4, r5, r6, lr}
 80044c2:	460e      	mov	r6, r1
 80044c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044c8:	2900      	cmp	r1, #0
 80044ca:	b096      	sub	sp, #88	; 0x58
 80044cc:	4614      	mov	r4, r2
 80044ce:	461d      	mov	r5, r3
 80044d0:	da07      	bge.n	80044e2 <__swhatbuf_r+0x22>
 80044d2:	2300      	movs	r3, #0
 80044d4:	602b      	str	r3, [r5, #0]
 80044d6:	89b3      	ldrh	r3, [r6, #12]
 80044d8:	061a      	lsls	r2, r3, #24
 80044da:	d410      	bmi.n	80044fe <__swhatbuf_r+0x3e>
 80044dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044e0:	e00e      	b.n	8004500 <__swhatbuf_r+0x40>
 80044e2:	466a      	mov	r2, sp
 80044e4:	f000 f8be 	bl	8004664 <_fstat_r>
 80044e8:	2800      	cmp	r0, #0
 80044ea:	dbf2      	blt.n	80044d2 <__swhatbuf_r+0x12>
 80044ec:	9a01      	ldr	r2, [sp, #4]
 80044ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80044f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80044f6:	425a      	negs	r2, r3
 80044f8:	415a      	adcs	r2, r3
 80044fa:	602a      	str	r2, [r5, #0]
 80044fc:	e7ee      	b.n	80044dc <__swhatbuf_r+0x1c>
 80044fe:	2340      	movs	r3, #64	; 0x40
 8004500:	2000      	movs	r0, #0
 8004502:	6023      	str	r3, [r4, #0]
 8004504:	b016      	add	sp, #88	; 0x58
 8004506:	bd70      	pop	{r4, r5, r6, pc}

08004508 <__smakebuf_r>:
 8004508:	898b      	ldrh	r3, [r1, #12]
 800450a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800450c:	079d      	lsls	r5, r3, #30
 800450e:	4606      	mov	r6, r0
 8004510:	460c      	mov	r4, r1
 8004512:	d507      	bpl.n	8004524 <__smakebuf_r+0x1c>
 8004514:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004518:	6023      	str	r3, [r4, #0]
 800451a:	6123      	str	r3, [r4, #16]
 800451c:	2301      	movs	r3, #1
 800451e:	6163      	str	r3, [r4, #20]
 8004520:	b002      	add	sp, #8
 8004522:	bd70      	pop	{r4, r5, r6, pc}
 8004524:	ab01      	add	r3, sp, #4
 8004526:	466a      	mov	r2, sp
 8004528:	f7ff ffca 	bl	80044c0 <__swhatbuf_r>
 800452c:	9900      	ldr	r1, [sp, #0]
 800452e:	4605      	mov	r5, r0
 8004530:	4630      	mov	r0, r6
 8004532:	f7ff fa73 	bl	8003a1c <_malloc_r>
 8004536:	b948      	cbnz	r0, 800454c <__smakebuf_r+0x44>
 8004538:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800453c:	059a      	lsls	r2, r3, #22
 800453e:	d4ef      	bmi.n	8004520 <__smakebuf_r+0x18>
 8004540:	f023 0303 	bic.w	r3, r3, #3
 8004544:	f043 0302 	orr.w	r3, r3, #2
 8004548:	81a3      	strh	r3, [r4, #12]
 800454a:	e7e3      	b.n	8004514 <__smakebuf_r+0xc>
 800454c:	4b0d      	ldr	r3, [pc, #52]	; (8004584 <__smakebuf_r+0x7c>)
 800454e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004550:	89a3      	ldrh	r3, [r4, #12]
 8004552:	6020      	str	r0, [r4, #0]
 8004554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004558:	81a3      	strh	r3, [r4, #12]
 800455a:	9b00      	ldr	r3, [sp, #0]
 800455c:	6163      	str	r3, [r4, #20]
 800455e:	9b01      	ldr	r3, [sp, #4]
 8004560:	6120      	str	r0, [r4, #16]
 8004562:	b15b      	cbz	r3, 800457c <__smakebuf_r+0x74>
 8004564:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004568:	4630      	mov	r0, r6
 800456a:	f000 f88d 	bl	8004688 <_isatty_r>
 800456e:	b128      	cbz	r0, 800457c <__smakebuf_r+0x74>
 8004570:	89a3      	ldrh	r3, [r4, #12]
 8004572:	f023 0303 	bic.w	r3, r3, #3
 8004576:	f043 0301 	orr.w	r3, r3, #1
 800457a:	81a3      	strh	r3, [r4, #12]
 800457c:	89a0      	ldrh	r0, [r4, #12]
 800457e:	4305      	orrs	r5, r0
 8004580:	81a5      	strh	r5, [r4, #12]
 8004582:	e7cd      	b.n	8004520 <__smakebuf_r+0x18>
 8004584:	08003875 	.word	0x08003875

08004588 <__malloc_lock>:
 8004588:	4801      	ldr	r0, [pc, #4]	; (8004590 <__malloc_lock+0x8>)
 800458a:	f7ff ba45 	b.w	8003a18 <__retarget_lock_acquire_recursive>
 800458e:	bf00      	nop
 8004590:	200001a8 	.word	0x200001a8

08004594 <__malloc_unlock>:
 8004594:	4801      	ldr	r0, [pc, #4]	; (800459c <__malloc_unlock+0x8>)
 8004596:	f7ff ba40 	b.w	8003a1a <__retarget_lock_release_recursive>
 800459a:	bf00      	nop
 800459c:	200001a8 	.word	0x200001a8

080045a0 <_free_r>:
 80045a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045a2:	2900      	cmp	r1, #0
 80045a4:	d048      	beq.n	8004638 <_free_r+0x98>
 80045a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045aa:	9001      	str	r0, [sp, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f1a1 0404 	sub.w	r4, r1, #4
 80045b2:	bfb8      	it	lt
 80045b4:	18e4      	addlt	r4, r4, r3
 80045b6:	f7ff ffe7 	bl	8004588 <__malloc_lock>
 80045ba:	4a20      	ldr	r2, [pc, #128]	; (800463c <_free_r+0x9c>)
 80045bc:	9801      	ldr	r0, [sp, #4]
 80045be:	6813      	ldr	r3, [r2, #0]
 80045c0:	4615      	mov	r5, r2
 80045c2:	b933      	cbnz	r3, 80045d2 <_free_r+0x32>
 80045c4:	6063      	str	r3, [r4, #4]
 80045c6:	6014      	str	r4, [r2, #0]
 80045c8:	b003      	add	sp, #12
 80045ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045ce:	f7ff bfe1 	b.w	8004594 <__malloc_unlock>
 80045d2:	42a3      	cmp	r3, r4
 80045d4:	d90b      	bls.n	80045ee <_free_r+0x4e>
 80045d6:	6821      	ldr	r1, [r4, #0]
 80045d8:	1862      	adds	r2, r4, r1
 80045da:	4293      	cmp	r3, r2
 80045dc:	bf04      	itt	eq
 80045de:	681a      	ldreq	r2, [r3, #0]
 80045e0:	685b      	ldreq	r3, [r3, #4]
 80045e2:	6063      	str	r3, [r4, #4]
 80045e4:	bf04      	itt	eq
 80045e6:	1852      	addeq	r2, r2, r1
 80045e8:	6022      	streq	r2, [r4, #0]
 80045ea:	602c      	str	r4, [r5, #0]
 80045ec:	e7ec      	b.n	80045c8 <_free_r+0x28>
 80045ee:	461a      	mov	r2, r3
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	b10b      	cbz	r3, 80045f8 <_free_r+0x58>
 80045f4:	42a3      	cmp	r3, r4
 80045f6:	d9fa      	bls.n	80045ee <_free_r+0x4e>
 80045f8:	6811      	ldr	r1, [r2, #0]
 80045fa:	1855      	adds	r5, r2, r1
 80045fc:	42a5      	cmp	r5, r4
 80045fe:	d10b      	bne.n	8004618 <_free_r+0x78>
 8004600:	6824      	ldr	r4, [r4, #0]
 8004602:	4421      	add	r1, r4
 8004604:	1854      	adds	r4, r2, r1
 8004606:	42a3      	cmp	r3, r4
 8004608:	6011      	str	r1, [r2, #0]
 800460a:	d1dd      	bne.n	80045c8 <_free_r+0x28>
 800460c:	681c      	ldr	r4, [r3, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	6053      	str	r3, [r2, #4]
 8004612:	4421      	add	r1, r4
 8004614:	6011      	str	r1, [r2, #0]
 8004616:	e7d7      	b.n	80045c8 <_free_r+0x28>
 8004618:	d902      	bls.n	8004620 <_free_r+0x80>
 800461a:	230c      	movs	r3, #12
 800461c:	6003      	str	r3, [r0, #0]
 800461e:	e7d3      	b.n	80045c8 <_free_r+0x28>
 8004620:	6825      	ldr	r5, [r4, #0]
 8004622:	1961      	adds	r1, r4, r5
 8004624:	428b      	cmp	r3, r1
 8004626:	bf04      	itt	eq
 8004628:	6819      	ldreq	r1, [r3, #0]
 800462a:	685b      	ldreq	r3, [r3, #4]
 800462c:	6063      	str	r3, [r4, #4]
 800462e:	bf04      	itt	eq
 8004630:	1949      	addeq	r1, r1, r5
 8004632:	6021      	streq	r1, [r4, #0]
 8004634:	6054      	str	r4, [r2, #4]
 8004636:	e7c7      	b.n	80045c8 <_free_r+0x28>
 8004638:	b003      	add	sp, #12
 800463a:	bd30      	pop	{r4, r5, pc}
 800463c:	20000090 	.word	0x20000090

08004640 <_read_r>:
 8004640:	b538      	push	{r3, r4, r5, lr}
 8004642:	4d07      	ldr	r5, [pc, #28]	; (8004660 <_read_r+0x20>)
 8004644:	4604      	mov	r4, r0
 8004646:	4608      	mov	r0, r1
 8004648:	4611      	mov	r1, r2
 800464a:	2200      	movs	r2, #0
 800464c:	602a      	str	r2, [r5, #0]
 800464e:	461a      	mov	r2, r3
 8004650:	f7fc faa2 	bl	8000b98 <_read>
 8004654:	1c43      	adds	r3, r0, #1
 8004656:	d102      	bne.n	800465e <_read_r+0x1e>
 8004658:	682b      	ldr	r3, [r5, #0]
 800465a:	b103      	cbz	r3, 800465e <_read_r+0x1e>
 800465c:	6023      	str	r3, [r4, #0]
 800465e:	bd38      	pop	{r3, r4, r5, pc}
 8004660:	200001b0 	.word	0x200001b0

08004664 <_fstat_r>:
 8004664:	b538      	push	{r3, r4, r5, lr}
 8004666:	4d07      	ldr	r5, [pc, #28]	; (8004684 <_fstat_r+0x20>)
 8004668:	2300      	movs	r3, #0
 800466a:	4604      	mov	r4, r0
 800466c:	4608      	mov	r0, r1
 800466e:	4611      	mov	r1, r2
 8004670:	602b      	str	r3, [r5, #0]
 8004672:	f7fc faba 	bl	8000bea <_fstat>
 8004676:	1c43      	adds	r3, r0, #1
 8004678:	d102      	bne.n	8004680 <_fstat_r+0x1c>
 800467a:	682b      	ldr	r3, [r5, #0]
 800467c:	b103      	cbz	r3, 8004680 <_fstat_r+0x1c>
 800467e:	6023      	str	r3, [r4, #0]
 8004680:	bd38      	pop	{r3, r4, r5, pc}
 8004682:	bf00      	nop
 8004684:	200001b0 	.word	0x200001b0

08004688 <_isatty_r>:
 8004688:	b538      	push	{r3, r4, r5, lr}
 800468a:	4d06      	ldr	r5, [pc, #24]	; (80046a4 <_isatty_r+0x1c>)
 800468c:	2300      	movs	r3, #0
 800468e:	4604      	mov	r4, r0
 8004690:	4608      	mov	r0, r1
 8004692:	602b      	str	r3, [r5, #0]
 8004694:	f7fc fab9 	bl	8000c0a <_isatty>
 8004698:	1c43      	adds	r3, r0, #1
 800469a:	d102      	bne.n	80046a2 <_isatty_r+0x1a>
 800469c:	682b      	ldr	r3, [r5, #0]
 800469e:	b103      	cbz	r3, 80046a2 <_isatty_r+0x1a>
 80046a0:	6023      	str	r3, [r4, #0]
 80046a2:	bd38      	pop	{r3, r4, r5, pc}
 80046a4:	200001b0 	.word	0x200001b0

080046a8 <_init>:
 80046a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046aa:	bf00      	nop
 80046ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ae:	bc08      	pop	{r3}
 80046b0:	469e      	mov	lr, r3
 80046b2:	4770      	bx	lr

080046b4 <_fini>:
 80046b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b6:	bf00      	nop
 80046b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ba:	bc08      	pop	{r3}
 80046bc:	469e      	mov	lr, r3
 80046be:	4770      	bx	lr
